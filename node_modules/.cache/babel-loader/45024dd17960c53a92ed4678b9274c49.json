{"ast":null,"code":"import _regeneratorRuntime from\"/Users/intvirtue/Last-final/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/intvirtue/Last-final/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";// log\nimport store from\"../store\";var fetchDataRequest=function fetchDataRequest(){return{type:\"CHECK_DATA_REQUEST\"};};var fetchDataSuccess=function fetchDataSuccess(payload){return{type:\"CHECK_DATA_SUCCESS\",payload:payload};};var fetchDataFailed=function fetchDataFailed(payload){return{type:\"CHECK_DATA_FAILED\",payload:payload};};export var fetchData=function fetchData(account){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var name,allTokens,totalSupply;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:dispatch(fetchDataRequest());_context.prev=1;_context.next=4;return store.getState().blockchain.smartContract.methods.name().call();case 4:name=_context.sent;_context.next=7;return store.getState().blockchain.smartContract.methods.getAllTokens().call();case 7:allTokens=_context.sent;_context.next=10;return store.getState().blockchain.smartContract.methods.totalSupply().call();case 10:totalSupply=_context.sent;dispatch(fetchDataSuccess({name:name,allTokens:allTokens,totalSupply:totalSupply}));_context.next=18;break;case 14:_context.prev=14;_context.t0=_context[\"catch\"](1);console.log(_context.t0);dispatch(fetchDataFailed(\"Could not load data from contract.\"));case 18:case\"end\":return _context.stop();}}},_callee,null,[[1,14]]);}));return function(_x){return _ref.apply(this,arguments);};}();};","map":{"version":3,"sources":["/Users/intvirtue/Last-final/src/redux/data/dataActions.js"],"names":["store","fetchDataRequest","type","fetchDataSuccess","payload","fetchDataFailed","fetchData","account","dispatch","getState","blockchain","smartContract","methods","name","call","getAllTokens","allTokens","totalSupply","console","log"],"mappings":"iSAAA;AACA,MAAOA,CAAAA,KAAP,KAAkB,UAAlB,CAEA,GAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,EAAM,CAC7B,MAAO,CACLC,IAAI,CAAE,oBADD,CAAP,CAGD,CAJD,CAMA,GAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACC,OAAD,CAAa,CACpC,MAAO,CACLF,IAAI,CAAE,oBADD,CAELE,OAAO,CAAEA,OAFJ,CAAP,CAID,CALD,CAOA,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACD,OAAD,CAAa,CACnC,MAAO,CACLF,IAAI,CAAE,mBADD,CAELE,OAAO,CAAEA,OAFJ,CAAP,CAID,CALD,CAOA,MAAO,IAAME,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAACC,OAAD,CAAa,CACpC,+FAAO,iBAAOC,QAAP,iJACLA,QAAQ,CAACP,gBAAgB,EAAjB,CAAR,CADK,sCAGcD,CAAAA,KAAK,CACnBS,QADc,GAEdC,UAFc,CAEHC,aAFG,CAEWC,OAFX,CAEmBC,IAFnB,GAGdC,IAHc,EAHd,QAGCD,IAHD,qCAOmBb,CAAAA,KAAK,CACxBS,QADmB,GAEnBC,UAFmB,CAERC,aAFQ,CAEMC,OAFN,CAEcG,YAFd,GAGnBD,IAHmB,EAPnB,QAOCE,SAPD,sCAWuBhB,CAAAA,KAAK,CAC5BS,QADuB,GAEvBC,UAFuB,CAEZC,aAFY,CAEEC,OAFF,CAEUK,WAFV,GAGvBH,IAHuB,EAXvB,SAWGG,WAXH,eAeHT,QAAQ,CACNL,gBAAgB,CAAC,CACfU,IAAI,CAAJA,IADe,CAEfG,SAAS,CAATA,SAFe,CAGfC,WAAW,CAAXA,WAHe,CAAD,CADV,CAAR,CAfG,iFAuBHC,OAAO,CAACC,GAAR,cACAX,QAAQ,CAACH,eAAe,CAAC,oCAAD,CAAhB,CAAR,CAxBG,qEAAP,+DA2BD,CA5BM","sourcesContent":["// log\nimport store from \"../store\";\n\nconst fetchDataRequest = () => {\n  return {\n    type: \"CHECK_DATA_REQUEST\",\n  };\n};\n\nconst fetchDataSuccess = (payload) => {\n  return {\n    type: \"CHECK_DATA_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst fetchDataFailed = (payload) => {\n  return {\n    type: \"CHECK_DATA_FAILED\",\n    payload: payload,\n  };\n};\n\nexport const fetchData = (account) => {\n  return async (dispatch) => {\n    dispatch(fetchDataRequest());\n    try {\n      let name = await store\n        .getState()\n        .blockchain.smartContract.methods.name()\n        .call();\n      let allTokens = await store\n        .getState()\n        .blockchain.smartContract.methods.getAllTokens()\n        .call();\n        let totalSupply = await store\n        .getState()\n        .blockchain.smartContract.methods.totalSupply()\n        .call();\n      dispatch(\n        fetchDataSuccess({\n          name,\n          allTokens,\n          totalSupply,\n        })\n      );\n    } catch (err) {\n      console.log(err);\n      dispatch(fetchDataFailed(\"Could not load data from contract.\"));\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}