{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar cid = require('multiformats/cid');\n\nvar toUrlSearchParams = require('../../lib/to-url-search-params.js');\n\nconst decodePin = _ref => {\n  let {\n    Name: name,\n    Status: status,\n    Cid: cid$1\n  } = _ref;\n  return {\n    cid: cid.CID.parse(cid$1),\n    name,\n    status\n  };\n};\n\nconst encodeService = service => {\n  if (typeof service === 'string' && service !== '') {\n    return service;\n  } else {\n    throw new TypeError('service name must be passed');\n  }\n};\n\nconst encodeCID = cid$1 => {\n  if (cid.CID.asCID(cid$1)) {\n    return cid$1.toString();\n  } else {\n    throw new TypeError(`CID instance expected instead of ${typeof cid$1}`);\n  }\n};\n\nconst encodeQuery = _ref2 => {\n  let {\n    service,\n    cid,\n    name,\n    status,\n    all\n  } = _ref2;\n  const query = toUrlSearchParams.toUrlSearchParams({\n    service: encodeService(service),\n    name,\n    force: all ? true : undefined\n  });\n\n  if (cid) {\n    for (const value of cid) {\n      query.append('cid', encodeCID(value));\n    }\n  }\n\n  if (status) {\n    for (const value of status) {\n      query.append('status', value);\n    }\n  }\n\n  return query;\n};\n\nconst encodeAddParams = _ref3 => {\n  let {\n    cid,\n    service,\n    background,\n    name,\n    origins\n  } = _ref3;\n  const params = toUrlSearchParams.toUrlSearchParams({\n    arg: encodeCID(cid),\n    service: encodeService(service),\n    name,\n    background: background ? true : undefined\n  });\n\n  if (origins) {\n    for (const origin of origins) {\n      params.append('origin', origin.toString());\n    }\n  }\n\n  return params;\n};\n\nexports.decodePin = decodePin;\nexports.encodeAddParams = encodeAddParams;\nexports.encodeCID = encodeCID;\nexports.encodeQuery = encodeQuery;\nexports.encodeService = encodeService;","map":{"version":3,"sources":["/Users/intvirtue/Last-final/node_modules/ipfs-http-client/cjs/src/pin/remote/utils.js"],"names":["Object","defineProperty","exports","value","cid","require","toUrlSearchParams","decodePin","Name","name","Status","status","Cid","cid$1","CID","parse","encodeService","service","TypeError","encodeCID","asCID","toString","encodeQuery","all","query","force","undefined","append","encodeAddParams","background","origins","params","arg","origin"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar cid = require('multiformats/cid');\nvar toUrlSearchParams = require('../../lib/to-url-search-params.js');\n\nconst decodePin = ({\n  Name: name,\n  Status: status,\n  Cid: cid$1\n}) => {\n  return {\n    cid: cid.CID.parse(cid$1),\n    name,\n    status\n  };\n};\nconst encodeService = service => {\n  if (typeof service === 'string' && service !== '') {\n    return service;\n  } else {\n    throw new TypeError('service name must be passed');\n  }\n};\nconst encodeCID = cid$1 => {\n  if (cid.CID.asCID(cid$1)) {\n    return cid$1.toString();\n  } else {\n    throw new TypeError(`CID instance expected instead of ${ typeof cid$1 }`);\n  }\n};\nconst encodeQuery = ({service, cid, name, status, all}) => {\n  const query = toUrlSearchParams.toUrlSearchParams({\n    service: encodeService(service),\n    name,\n    force: all ? true : undefined\n  });\n  if (cid) {\n    for (const value of cid) {\n      query.append('cid', encodeCID(value));\n    }\n  }\n  if (status) {\n    for (const value of status) {\n      query.append('status', value);\n    }\n  }\n  return query;\n};\nconst encodeAddParams = ({cid, service, background, name, origins}) => {\n  const params = toUrlSearchParams.toUrlSearchParams({\n    arg: encodeCID(cid),\n    service: encodeService(service),\n    name,\n    background: background ? true : undefined\n  });\n  if (origins) {\n    for (const origin of origins) {\n      params.append('origin', origin.toString());\n    }\n  }\n  return params;\n};\n\nexports.decodePin = decodePin;\nexports.encodeAddParams = encodeAddParams;\nexports.encodeCID = encodeCID;\nexports.encodeQuery = encodeQuery;\nexports.encodeService = encodeService;\n"]},"metadata":{},"sourceType":"script"}