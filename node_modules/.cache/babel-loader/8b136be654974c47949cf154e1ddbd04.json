{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar cid = require('multiformats/cid');\n\nvar objectToCamel = require('./lib/object-to-camel.js');\n\nvar configure = require('./lib/configure.js');\n\nvar multipartRequest = require('ipfs-core-utils/multipart-request');\n\nvar toUrlSearchParams = require('./lib/to-url-search-params.js');\n\nvar abortSignal = require('./lib/abort-signal.js');\n\nvar nativeAbortController = require('native-abort-controller');\n\nconst createAddAll = configure.configure(api => {\n  async function* addAll(source) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const controller = new nativeAbortController.AbortController();\n    const signal = abortSignal.abortSignal(controller.signal, options.signal);\n    const {\n      headers,\n      body,\n      total,\n      parts\n    } = await multipartRequest.multipartRequest(source, controller, options.headers);\n    const [progressFn, onUploadProgress] = typeof options.progress === 'function' ? createProgressHandler(total, parts, options.progress) : [undefined, undefined];\n    const res = await api.post('add', {\n      searchParams: toUrlSearchParams.toUrlSearchParams({\n        'stream-channels': true,\n        ...options,\n        progress: Boolean(progressFn)\n      }),\n      onUploadProgress,\n      signal,\n      headers,\n      body\n    });\n\n    for await (let file of res.ndjson()) {\n      file = objectToCamel.objectToCamel(file);\n\n      if (file.hash !== undefined) {\n        yield toCoreInterface(file);\n      } else if (progressFn) {\n        progressFn(file.bytes || 0, file.name);\n      }\n    }\n  }\n\n  return addAll;\n});\n\nconst createProgressHandler = (total, parts, progress) => parts ? [undefined, createOnUploadProgress(total, parts, progress)] : [progress, undefined];\n\nconst createOnUploadProgress = (size, parts, progress) => {\n  let index = 0;\n  const count = parts.length;\n  return _ref => {\n    let {\n      loaded,\n      total\n    } = _ref;\n    const position = Math.floor(loaded / total * size);\n\n    while (index < count) {\n      const {\n        start,\n        end,\n        name\n      } = parts[index];\n\n      if (position < end) {\n        progress(position - start, name);\n        break;\n      } else {\n        progress(end - start, name);\n        index += 1;\n      }\n    }\n  };\n};\n\nfunction toCoreInterface(_ref2) {\n  let {\n    name,\n    hash,\n    size,\n    mode,\n    mtime,\n    mtimeNsecs\n  } = _ref2;\n  const output = {\n    path: name,\n    cid: cid.CID.parse(hash),\n    size: parseInt(size)\n  };\n\n  if (mode != null) {\n    output.mode = parseInt(mode, 8);\n  }\n\n  if (mtime != null) {\n    output.mtime = {\n      secs: mtime,\n      nsecs: mtimeNsecs || 0\n    };\n  }\n\n  return output;\n}\n\nexports.createAddAll = createAddAll;","map":{"version":3,"sources":["/Users/intvirtue/Last-final/node_modules/ipfs-http-client/cjs/src/add-all.js"],"names":["Object","defineProperty","exports","value","cid","require","objectToCamel","configure","multipartRequest","toUrlSearchParams","abortSignal","nativeAbortController","createAddAll","api","addAll","source","options","controller","AbortController","signal","headers","body","total","parts","progressFn","onUploadProgress","progress","createProgressHandler","undefined","res","post","searchParams","Boolean","file","ndjson","hash","toCoreInterface","bytes","name","createOnUploadProgress","size","index","count","length","loaded","position","Math","floor","start","end","mode","mtime","mtimeNsecs","output","path","CID","parse","parseInt","secs","nsecs"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar cid = require('multiformats/cid');\nvar objectToCamel = require('./lib/object-to-camel.js');\nvar configure = require('./lib/configure.js');\nvar multipartRequest = require('ipfs-core-utils/multipart-request');\nvar toUrlSearchParams = require('./lib/to-url-search-params.js');\nvar abortSignal = require('./lib/abort-signal.js');\nvar nativeAbortController = require('native-abort-controller');\n\nconst createAddAll = configure.configure(api => {\n  async function* addAll(source, options = {}) {\n    const controller = new nativeAbortController.AbortController();\n    const signal = abortSignal.abortSignal(controller.signal, options.signal);\n    const {headers, body, total, parts} = await multipartRequest.multipartRequest(source, controller, options.headers);\n    const [progressFn, onUploadProgress] = typeof options.progress === 'function' ? createProgressHandler(total, parts, options.progress) : [\n      undefined,\n      undefined\n    ];\n    const res = await api.post('add', {\n      searchParams: toUrlSearchParams.toUrlSearchParams({\n        'stream-channels': true,\n        ...options,\n        progress: Boolean(progressFn)\n      }),\n      onUploadProgress,\n      signal,\n      headers,\n      body\n    });\n    for await (let file of res.ndjson()) {\n      file = objectToCamel.objectToCamel(file);\n      if (file.hash !== undefined) {\n        yield toCoreInterface(file);\n      } else if (progressFn) {\n        progressFn(file.bytes || 0, file.name);\n      }\n    }\n  }\n  return addAll;\n});\nconst createProgressHandler = (total, parts, progress) => parts ? [\n  undefined,\n  createOnUploadProgress(total, parts, progress)\n] : [\n  progress,\n  undefined\n];\nconst createOnUploadProgress = (size, parts, progress) => {\n  let index = 0;\n  const count = parts.length;\n  return ({loaded, total}) => {\n    const position = Math.floor(loaded / total * size);\n    while (index < count) {\n      const {start, end, name} = parts[index];\n      if (position < end) {\n        progress(position - start, name);\n        break;\n      } else {\n        progress(end - start, name);\n        index += 1;\n      }\n    }\n  };\n};\nfunction toCoreInterface({name, hash, size, mode, mtime, mtimeNsecs}) {\n  const output = {\n    path: name,\n    cid: cid.CID.parse(hash),\n    size: parseInt(size)\n  };\n  if (mode != null) {\n    output.mode = parseInt(mode, 8);\n  }\n  if (mtime != null) {\n    output.mtime = {\n      secs: mtime,\n      nsecs: mtimeNsecs || 0\n    };\n  }\n  return output;\n}\n\nexports.createAddAll = createAddAll;\n"]},"metadata":{},"sourceType":"script"}