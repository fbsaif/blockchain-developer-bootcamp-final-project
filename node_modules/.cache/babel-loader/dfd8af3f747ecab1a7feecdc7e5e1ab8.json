{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar errCode = require('err-code');\n\nvar browserStreamToIt = require('browser-readablestream-to-it');\n\nvar itPeekable = require('it-peekable');\n\nvar utils = require('./utils.js');\n\nvar ipfsUnixfs = require('ipfs-unixfs');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nvar errCode__default = /*#__PURE__*/_interopDefaultLegacy(errCode);\n\nvar browserStreamToIt__default = /*#__PURE__*/_interopDefaultLegacy(browserStreamToIt);\n\nvar itPeekable__default = /*#__PURE__*/_interopDefaultLegacy(itPeekable);\n\nasync function* normaliseCandidateSingle(input, normaliseContent) {\n  if (input === null || input === undefined) {\n    throw errCode__default[\"default\"](new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT');\n  }\n\n  if (typeof input === 'string' || input instanceof String) {\n    yield toFileObject(input.toString(), normaliseContent);\n    return;\n  }\n\n  if (utils.isBytes(input) || utils.isBlob(input)) {\n    yield toFileObject(input, normaliseContent);\n    return;\n  }\n\n  if (utils.isReadableStream(input)) {\n    input = browserStreamToIt__default[\"default\"](input);\n  }\n\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    const peekable = itPeekable__default[\"default\"](input);\n    const {\n      value,\n      done\n    } = await peekable.peek();\n\n    if (done) {\n      yield {\n        content: []\n      };\n      return;\n    }\n\n    peekable.push(value);\n\n    if (Number.isInteger(value) || utils.isBytes(value) || typeof value === 'string' || value instanceof String) {\n      yield toFileObject(peekable, normaliseContent);\n      return;\n    }\n\n    throw errCode__default[\"default\"](new Error('Unexpected input: multiple items passed - if you are using ipfs.add, please use ipfs.addAll instead'), 'ERR_UNEXPECTED_INPUT');\n  }\n\n  if (utils.isFileObject(input)) {\n    yield toFileObject(input, normaliseContent);\n    return;\n  }\n\n  throw errCode__default[\"default\"](new Error('Unexpected input: cannot convert \"' + typeof input + '\" into ImportCandidate'), 'ERR_UNEXPECTED_INPUT');\n}\n\nasync function toFileObject(input, normaliseContent) {\n  const {\n    path,\n    mode,\n    mtime,\n    content\n  } = input;\n  const file = {\n    path: path || '',\n    mode: ipfsUnixfs.parseMode(mode),\n    mtime: ipfsUnixfs.parseMtime(mtime)\n  };\n\n  if (content) {\n    file.content = await normaliseContent(content);\n  } else if (!path) {\n    file.content = await normaliseContent(input);\n  }\n\n  return file;\n}\n\nexports.normaliseCandidateSingle = normaliseCandidateSingle;","map":{"version":3,"sources":["/Users/intvirtue/Last-final/node_modules/ipfs-core-utils/cjs/src/files/normalise-candidate-single.js"],"names":["Object","defineProperty","exports","value","errCode","require","browserStreamToIt","itPeekable","utils","ipfsUnixfs","_interopDefaultLegacy","e","errCode__default","browserStreamToIt__default","itPeekable__default","normaliseCandidateSingle","input","normaliseContent","undefined","Error","String","toFileObject","toString","isBytes","isBlob","isReadableStream","Symbol","iterator","asyncIterator","peekable","done","peek","content","push","Number","isInteger","isFileObject","path","mode","mtime","file","parseMode","parseMtime"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar errCode = require('err-code');\nvar browserStreamToIt = require('browser-readablestream-to-it');\nvar itPeekable = require('it-peekable');\nvar utils = require('./utils.js');\nvar ipfsUnixfs = require('ipfs-unixfs');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar errCode__default = /*#__PURE__*/_interopDefaultLegacy(errCode);\nvar browserStreamToIt__default = /*#__PURE__*/_interopDefaultLegacy(browserStreamToIt);\nvar itPeekable__default = /*#__PURE__*/_interopDefaultLegacy(itPeekable);\n\nasync function* normaliseCandidateSingle(input, normaliseContent) {\n  if (input === null || input === undefined) {\n    throw errCode__default[\"default\"](new Error(`Unexpected input: ${ input }`), 'ERR_UNEXPECTED_INPUT');\n  }\n  if (typeof input === 'string' || input instanceof String) {\n    yield toFileObject(input.toString(), normaliseContent);\n    return;\n  }\n  if (utils.isBytes(input) || utils.isBlob(input)) {\n    yield toFileObject(input, normaliseContent);\n    return;\n  }\n  if (utils.isReadableStream(input)) {\n    input = browserStreamToIt__default[\"default\"](input);\n  }\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    const peekable = itPeekable__default[\"default\"](input);\n    const {value, done} = await peekable.peek();\n    if (done) {\n      yield { content: [] };\n      return;\n    }\n    peekable.push(value);\n    if (Number.isInteger(value) || utils.isBytes(value) || typeof value === 'string' || value instanceof String) {\n      yield toFileObject(peekable, normaliseContent);\n      return;\n    }\n    throw errCode__default[\"default\"](new Error('Unexpected input: multiple items passed - if you are using ipfs.add, please use ipfs.addAll instead'), 'ERR_UNEXPECTED_INPUT');\n  }\n  if (utils.isFileObject(input)) {\n    yield toFileObject(input, normaliseContent);\n    return;\n  }\n  throw errCode__default[\"default\"](new Error('Unexpected input: cannot convert \"' + typeof input + '\" into ImportCandidate'), 'ERR_UNEXPECTED_INPUT');\n}\nasync function toFileObject(input, normaliseContent) {\n  const {path, mode, mtime, content} = input;\n  const file = {\n    path: path || '',\n    mode: ipfsUnixfs.parseMode(mode),\n    mtime: ipfsUnixfs.parseMtime(mtime)\n  };\n  if (content) {\n    file.content = await normaliseContent(content);\n  } else if (!path) {\n    file.content = await normaliseContent(input);\n  }\n  return file;\n}\n\nexports.normaliseCandidateSingle = normaliseCandidateSingle;\n"]},"metadata":{},"sourceType":"script"}