{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar configure = require('../lib/configure.js');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params.js');\n\nconst createGet = configure.configure(api => {\n  async function get(cid) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const res = await api.post('block/get', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams.toUrlSearchParams({\n        arg: cid.toString(),\n        ...options\n      }),\n      headers: options.headers\n    });\n    return new Uint8Array(await res.arrayBuffer());\n  }\n\n  return get;\n});\nexports.createGet = createGet;","map":{"version":3,"sources":["/Users/intvirtue/Last-final/node_modules/ipfs-http-client/cjs/src/block/get.js"],"names":["Object","defineProperty","exports","value","configure","require","toUrlSearchParams","createGet","api","get","cid","options","res","post","signal","searchParams","arg","toString","headers","Uint8Array","arrayBuffer"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AAEA,IAAIC,SAAS,GAAGC,OAAO,CAAC,qBAAD,CAAvB;;AACA,IAAIC,iBAAiB,GAAGD,OAAO,CAAC,gCAAD,CAA/B;;AAEA,MAAME,SAAS,GAAGH,SAAS,CAACA,SAAV,CAAoBI,GAAG,IAAI;AAC3C,iBAAeC,GAAf,CAAmBC,GAAnB,EAAsC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AACpC,UAAMC,GAAG,GAAG,MAAMJ,GAAG,CAACK,IAAJ,CAAS,WAAT,EAAsB;AACtCC,MAAAA,MAAM,EAAEH,OAAO,CAACG,MADsB;AAEtCC,MAAAA,YAAY,EAAET,iBAAiB,CAACA,iBAAlB,CAAoC;AAChDU,QAAAA,GAAG,EAAEN,GAAG,CAACO,QAAJ,EAD2C;AAEhD,WAAGN;AAF6C,OAApC,CAFwB;AAMtCO,MAAAA,OAAO,EAAEP,OAAO,CAACO;AANqB,KAAtB,CAAlB;AAQA,WAAO,IAAIC,UAAJ,CAAe,MAAMP,GAAG,CAACQ,WAAJ,EAArB,CAAP;AACD;;AACD,SAAOX,GAAP;AACD,CAbiB,CAAlB;AAeAP,OAAO,CAACK,SAAR,GAAoBA,SAApB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar configure = require('../lib/configure.js');\nvar toUrlSearchParams = require('../lib/to-url-search-params.js');\n\nconst createGet = configure.configure(api => {\n  async function get(cid, options = {}) {\n    const res = await api.post('block/get', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams.toUrlSearchParams({\n        arg: cid.toString(),\n        ...options\n      }),\n      headers: options.headers\n    });\n    return new Uint8Array(await res.arrayBuffer());\n  }\n  return get;\n});\n\nexports.createGet = createGet;\n"]},"metadata":{},"sourceType":"script"}