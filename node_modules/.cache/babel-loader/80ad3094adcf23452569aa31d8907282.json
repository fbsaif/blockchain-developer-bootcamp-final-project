{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nconst LOAD_CODEC = codeOrName => Promise.reject(new Error(`No codec found for \"${codeOrName}\"`));\n\nclass Multicodecs {\n  constructor(options) {\n    this._codecsByName = {};\n    this._codecsByCode = {};\n    this._loadCodec = options.loadCodec || LOAD_CODEC;\n\n    for (const codec of options.codecs) {\n      this.addCodec(codec);\n    }\n  }\n\n  addCodec(codec) {\n    if (this._codecsByName[codec.name] || this._codecsByCode[codec.code]) {\n      throw new Error(`Resolver already exists for codec \"${codec.name}\"`);\n    }\n\n    this._codecsByName[codec.name] = codec;\n    this._codecsByCode[codec.code] = codec;\n  }\n\n  removeCodec(codec) {\n    delete this._codecsByName[codec.name];\n    delete this._codecsByCode[codec.code];\n  }\n\n  async getCodec(code) {\n    const table = typeof code === 'string' ? this._codecsByName : this._codecsByCode;\n\n    if (table[code]) {\n      return table[code];\n    }\n\n    const codec = await this._loadCodec(code);\n\n    if (table[code] == null) {\n      this.addCodec(codec);\n    }\n\n    return codec;\n  }\n\n  listCodecs() {\n    return Object.values(this._codecsByName);\n  }\n\n}\n\nexports.Multicodecs = Multicodecs;","map":{"version":3,"sources":["/Users/intvirtue/Last-final/node_modules/ipfs-core-utils/cjs/src/multicodecs.js"],"names":["Object","defineProperty","exports","value","LOAD_CODEC","codeOrName","Promise","reject","Error","Multicodecs","constructor","options","_codecsByName","_codecsByCode","_loadCodec","loadCodec","codec","codecs","addCodec","name","code","removeCodec","getCodec","table","listCodecs","values"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AAEA,MAAMC,UAAU,GAAGC,UAAU,IAAIC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAW,uBAAuBH,UAAY,GAA9C,CAAf,CAAjC;;AACA,MAAMI,WAAN,CAAkB;AAChBC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB,SAAKC,aAAL,GAAqB,EAArB;AACA,SAAKC,aAAL,GAAqB,EAArB;AACA,SAAKC,UAAL,GAAkBH,OAAO,CAACI,SAAR,IAAqBX,UAAvC;;AACA,SAAK,MAAMY,KAAX,IAAoBL,OAAO,CAACM,MAA5B,EAAoC;AAClC,WAAKC,QAAL,CAAcF,KAAd;AACD;AACF;;AACDE,EAAAA,QAAQ,CAACF,KAAD,EAAQ;AACd,QAAI,KAAKJ,aAAL,CAAmBI,KAAK,CAACG,IAAzB,KAAkC,KAAKN,aAAL,CAAmBG,KAAK,CAACI,IAAzB,CAAtC,EAAsE;AACpE,YAAM,IAAIZ,KAAJ,CAAW,sCAAsCQ,KAAK,CAACG,IAAM,GAA7D,CAAN;AACD;;AACD,SAAKP,aAAL,CAAmBI,KAAK,CAACG,IAAzB,IAAiCH,KAAjC;AACA,SAAKH,aAAL,CAAmBG,KAAK,CAACI,IAAzB,IAAiCJ,KAAjC;AACD;;AACDK,EAAAA,WAAW,CAACL,KAAD,EAAQ;AACjB,WAAO,KAAKJ,aAAL,CAAmBI,KAAK,CAACG,IAAzB,CAAP;AACA,WAAO,KAAKN,aAAL,CAAmBG,KAAK,CAACI,IAAzB,CAAP;AACD;;AACa,QAARE,QAAQ,CAACF,IAAD,EAAO;AACnB,UAAMG,KAAK,GAAG,OAAOH,IAAP,KAAgB,QAAhB,GAA2B,KAAKR,aAAhC,GAAgD,KAAKC,aAAnE;;AACA,QAAIU,KAAK,CAACH,IAAD,CAAT,EAAiB;AACf,aAAOG,KAAK,CAACH,IAAD,CAAZ;AACD;;AACD,UAAMJ,KAAK,GAAG,MAAM,KAAKF,UAAL,CAAgBM,IAAhB,CAApB;;AACA,QAAIG,KAAK,CAACH,IAAD,CAAL,IAAe,IAAnB,EAAyB;AACvB,WAAKF,QAAL,CAAcF,KAAd;AACD;;AACD,WAAOA,KAAP;AACD;;AACDQ,EAAAA,UAAU,GAAG;AACX,WAAOxB,MAAM,CAACyB,MAAP,CAAc,KAAKb,aAAnB,CAAP;AACD;;AAjCe;;AAoClBV,OAAO,CAACO,WAAR,GAAsBA,WAAtB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nconst LOAD_CODEC = codeOrName => Promise.reject(new Error(`No codec found for \"${ codeOrName }\"`));\nclass Multicodecs {\n  constructor(options) {\n    this._codecsByName = {};\n    this._codecsByCode = {};\n    this._loadCodec = options.loadCodec || LOAD_CODEC;\n    for (const codec of options.codecs) {\n      this.addCodec(codec);\n    }\n  }\n  addCodec(codec) {\n    if (this._codecsByName[codec.name] || this._codecsByCode[codec.code]) {\n      throw new Error(`Resolver already exists for codec \"${ codec.name }\"`);\n    }\n    this._codecsByName[codec.name] = codec;\n    this._codecsByCode[codec.code] = codec;\n  }\n  removeCodec(codec) {\n    delete this._codecsByName[codec.name];\n    delete this._codecsByCode[codec.code];\n  }\n  async getCodec(code) {\n    const table = typeof code === 'string' ? this._codecsByName : this._codecsByCode;\n    if (table[code]) {\n      return table[code];\n    }\n    const codec = await this._loadCodec(code);\n    if (table[code] == null) {\n      this.addCodec(codec);\n    }\n    return codec;\n  }\n  listCodecs() {\n    return Object.values(this._codecsByName);\n  }\n}\n\nexports.Multicodecs = Multicodecs;\n"]},"metadata":{},"sourceType":"script"}