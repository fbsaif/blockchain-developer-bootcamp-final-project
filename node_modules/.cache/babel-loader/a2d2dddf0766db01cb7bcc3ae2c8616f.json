{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar multiaddr = require('multiaddr');\n\nvar configure = require('../lib/configure.js');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params.js');\n\nvar responseTypes = require('./response-types.js');\n\nconst createFindPeer = configure.configure(api => {\n  async function findPeer(peerId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const res = await api.post('dht/findpeer', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams.toUrlSearchParams({\n        arg: peerId,\n        ...options\n      }),\n      headers: options.headers\n    });\n\n    for await (const data of res.ndjson()) {\n      if (data.Type === responseTypes.FinalPeer && data.Responses) {\n        const {\n          ID,\n          Addrs\n        } = data.Responses[0];\n        return {\n          id: ID,\n          addrs: (Addrs || []).map(a => new multiaddr.Multiaddr(a))\n        };\n      }\n    }\n\n    throw new Error('not found');\n  }\n\n  return findPeer;\n});\nexports.createFindPeer = createFindPeer;","map":{"version":3,"sources":["/Users/intvirtue/Last-final/node_modules/ipfs-http-client/cjs/src/dht/find-peer.js"],"names":["Object","defineProperty","exports","value","multiaddr","require","configure","toUrlSearchParams","responseTypes","createFindPeer","api","findPeer","peerId","options","res","post","signal","searchParams","arg","headers","data","ndjson","Type","FinalPeer","Responses","ID","Addrs","id","addrs","map","a","Multiaddr","Error"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AAEA,IAAIC,SAAS,GAAGC,OAAO,CAAC,WAAD,CAAvB;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,qBAAD,CAAvB;;AACA,IAAIE,iBAAiB,GAAGF,OAAO,CAAC,gCAAD,CAA/B;;AACA,IAAIG,aAAa,GAAGH,OAAO,CAAC,qBAAD,CAA3B;;AAEA,MAAMI,cAAc,GAAGH,SAAS,CAACA,SAAV,CAAoBI,GAAG,IAAI;AAChD,iBAAeC,QAAf,CAAwBC,MAAxB,EAA8C;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AAC5C,UAAMC,GAAG,GAAG,MAAMJ,GAAG,CAACK,IAAJ,CAAS,cAAT,EAAyB;AACzCC,MAAAA,MAAM,EAAEH,OAAO,CAACG,MADyB;AAEzCC,MAAAA,YAAY,EAAEV,iBAAiB,CAACA,iBAAlB,CAAoC;AAChDW,QAAAA,GAAG,EAAEN,MAD2C;AAEhD,WAAGC;AAF6C,OAApC,CAF2B;AAMzCM,MAAAA,OAAO,EAAEN,OAAO,CAACM;AANwB,KAAzB,CAAlB;;AAQA,eAAW,MAAMC,IAAjB,IAAyBN,GAAG,CAACO,MAAJ,EAAzB,EAAuC;AACrC,UAAID,IAAI,CAACE,IAAL,KAAcd,aAAa,CAACe,SAA5B,IAAyCH,IAAI,CAACI,SAAlD,EAA6D;AAC3D,cAAM;AAACC,UAAAA,EAAD;AAAKC,UAAAA;AAAL,YAAcN,IAAI,CAACI,SAAL,CAAe,CAAf,CAApB;AACA,eAAO;AACLG,UAAAA,EAAE,EAAEF,EADC;AAELG,UAAAA,KAAK,EAAE,CAACF,KAAK,IAAI,EAAV,EAAcG,GAAd,CAAkBC,CAAC,IAAI,IAAI1B,SAAS,CAAC2B,SAAd,CAAwBD,CAAxB,CAAvB;AAFF,SAAP;AAID;AACF;;AACD,UAAM,IAAIE,KAAJ,CAAU,WAAV,CAAN;AACD;;AACD,SAAOrB,QAAP;AACD,CAtBsB,CAAvB;AAwBAT,OAAO,CAACO,cAAR,GAAyBA,cAAzB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar multiaddr = require('multiaddr');\nvar configure = require('../lib/configure.js');\nvar toUrlSearchParams = require('../lib/to-url-search-params.js');\nvar responseTypes = require('./response-types.js');\n\nconst createFindPeer = configure.configure(api => {\n  async function findPeer(peerId, options = {}) {\n    const res = await api.post('dht/findpeer', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams.toUrlSearchParams({\n        arg: peerId,\n        ...options\n      }),\n      headers: options.headers\n    });\n    for await (const data of res.ndjson()) {\n      if (data.Type === responseTypes.FinalPeer && data.Responses) {\n        const {ID, Addrs} = data.Responses[0];\n        return {\n          id: ID,\n          addrs: (Addrs || []).map(a => new multiaddr.Multiaddr(a))\n        };\n      }\n    }\n    throw new Error('not found');\n  }\n  return findPeer;\n});\n\nexports.createFindPeer = createFindPeer;\n"]},"metadata":{},"sourceType":"script"}