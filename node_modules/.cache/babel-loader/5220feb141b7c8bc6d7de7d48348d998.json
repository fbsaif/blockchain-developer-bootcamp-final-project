{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar configure = require('../lib/configure.js');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params.js');\n\nconst createSet = configure.configure(api => {\n  const set = async function (key, value) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    if (typeof key !== 'string') {\n      throw new Error('Invalid key type');\n    }\n\n    const params = { ...options,\n      ...encodeParam(key, value)\n    };\n    const res = await api.post('config', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams.toUrlSearchParams(params),\n      headers: options.headers\n    });\n    await res.text();\n  };\n\n  return set;\n});\n\nconst encodeParam = (key, value) => {\n  switch (typeof value) {\n    case 'boolean':\n      return {\n        arg: [key, value.toString()],\n        bool: true\n      };\n\n    case 'string':\n      return {\n        arg: [key, value]\n      };\n\n    default:\n      return {\n        arg: [key, JSON.stringify(value)],\n        json: true\n      };\n  }\n};\n\nexports.createSet = createSet;","map":{"version":3,"sources":["/Users/intvirtue/Last-final/node_modules/ipfs-http-client/cjs/src/config/set.js"],"names":["Object","defineProperty","exports","value","configure","require","toUrlSearchParams","createSet","api","set","key","options","Error","params","encodeParam","res","post","signal","searchParams","headers","text","arg","toString","bool","JSON","stringify","json"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AAEA,IAAIC,SAAS,GAAGC,OAAO,CAAC,qBAAD,CAAvB;;AACA,IAAIC,iBAAiB,GAAGD,OAAO,CAAC,gCAAD,CAA/B;;AAEA,MAAME,SAAS,GAAGH,SAAS,CAACA,SAAV,CAAoBI,GAAG,IAAI;AAC3C,QAAMC,GAAG,GAAG,gBAAOC,GAAP,EAAYP,KAAZ,EAAoC;AAAA,QAAjBQ,OAAiB,uEAAP,EAAO;;AAC9C,QAAI,OAAOD,GAAP,KAAe,QAAnB,EAA6B;AAC3B,YAAM,IAAIE,KAAJ,CAAU,kBAAV,CAAN;AACD;;AACD,UAAMC,MAAM,GAAG,EACb,GAAGF,OADU;AAEb,SAAGG,WAAW,CAACJ,GAAD,EAAMP,KAAN;AAFD,KAAf;AAIA,UAAMY,GAAG,GAAG,MAAMP,GAAG,CAACQ,IAAJ,CAAS,QAAT,EAAmB;AACnCC,MAAAA,MAAM,EAAEN,OAAO,CAACM,MADmB;AAEnCC,MAAAA,YAAY,EAAEZ,iBAAiB,CAACA,iBAAlB,CAAoCO,MAApC,CAFqB;AAGnCM,MAAAA,OAAO,EAAER,OAAO,CAACQ;AAHkB,KAAnB,CAAlB;AAKA,UAAMJ,GAAG,CAACK,IAAJ,EAAN;AACD,GAdD;;AAeA,SAAOX,GAAP;AACD,CAjBiB,CAAlB;;AAkBA,MAAMK,WAAW,GAAG,CAACJ,GAAD,EAAMP,KAAN,KAAgB;AAClC,UAAQ,OAAOA,KAAf;AACA,SAAK,SAAL;AACE,aAAO;AACLkB,QAAAA,GAAG,EAAE,CACHX,GADG,EAEHP,KAAK,CAACmB,QAAN,EAFG,CADA;AAKLC,QAAAA,IAAI,EAAE;AALD,OAAP;;AAOF,SAAK,QAAL;AACE,aAAO;AACLF,QAAAA,GAAG,EAAE,CACHX,GADG,EAEHP,KAFG;AADA,OAAP;;AAMF;AACE,aAAO;AACLkB,QAAAA,GAAG,EAAE,CACHX,GADG,EAEHc,IAAI,CAACC,SAAL,CAAetB,KAAf,CAFG,CADA;AAKLuB,QAAAA,IAAI,EAAE;AALD,OAAP;AAjBF;AAyBD,CA1BD;;AA4BAxB,OAAO,CAACK,SAAR,GAAoBA,SAApB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar configure = require('../lib/configure.js');\nvar toUrlSearchParams = require('../lib/to-url-search-params.js');\n\nconst createSet = configure.configure(api => {\n  const set = async (key, value, options = {}) => {\n    if (typeof key !== 'string') {\n      throw new Error('Invalid key type');\n    }\n    const params = {\n      ...options,\n      ...encodeParam(key, value)\n    };\n    const res = await api.post('config', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams.toUrlSearchParams(params),\n      headers: options.headers\n    });\n    await res.text();\n  };\n  return set;\n});\nconst encodeParam = (key, value) => {\n  switch (typeof value) {\n  case 'boolean':\n    return {\n      arg: [\n        key,\n        value.toString()\n      ],\n      bool: true\n    };\n  case 'string':\n    return {\n      arg: [\n        key,\n        value\n      ]\n    };\n  default:\n    return {\n      arg: [\n        key,\n        JSON.stringify(value)\n      ],\n      json: true\n    };\n  }\n};\n\nexports.createSet = createSet;\n"]},"metadata":{},"sourceType":"script"}