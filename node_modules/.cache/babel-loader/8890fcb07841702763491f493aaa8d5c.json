{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar cid = require('multiformats/cid');\n\nvar objectToCamelWithMetadata = require('../lib/object-to-camel-with-metadata.js');\n\nvar configure = require('../lib/configure.js');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params.js');\n\nconst createLs = configure.configure(api => {\n  async function* ls(path) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (!path) {\n      throw new Error('ipfs.files.ls requires a path');\n    }\n\n    const res = await api.post('files/ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams.toUrlSearchParams({\n        arg: cid.CID.asCID(path) ? `/ipfs/${path}` : path,\n        long: true,\n        ...options,\n        stream: true\n      }),\n      headers: options.headers\n    });\n\n    for await (const result of res.ndjson()) {\n      if ('Entries' in result) {\n        for (const entry of result.Entries || []) {\n          yield toCoreInterface(objectToCamelWithMetadata.objectToCamelWithMetadata(entry));\n        }\n      } else {\n        yield toCoreInterface(objectToCamelWithMetadata.objectToCamelWithMetadata(result));\n      }\n    }\n  }\n\n  return ls;\n});\n\nfunction toCoreInterface(entry) {\n  if (entry.hash) {\n    entry.cid = cid.CID.parse(entry.hash);\n  }\n\n  delete entry.hash;\n  entry.type = entry.type === 1 ? 'directory' : 'file';\n  return entry;\n}\n\nexports.createLs = createLs;","map":{"version":3,"sources":["/Users/intvirtue/Last-final/node_modules/ipfs-http-client/cjs/src/files/ls.js"],"names":["Object","defineProperty","exports","value","cid","require","objectToCamelWithMetadata","configure","toUrlSearchParams","createLs","api","ls","path","options","Error","res","post","signal","searchParams","arg","CID","asCID","long","stream","headers","result","ndjson","entry","Entries","toCoreInterface","hash","parse","type"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AAEA,IAAIC,GAAG,GAAGC,OAAO,CAAC,kBAAD,CAAjB;;AACA,IAAIC,yBAAyB,GAAGD,OAAO,CAAC,yCAAD,CAAvC;;AACA,IAAIE,SAAS,GAAGF,OAAO,CAAC,qBAAD,CAAvB;;AACA,IAAIG,iBAAiB,GAAGH,OAAO,CAAC,gCAAD,CAA/B;;AAEA,MAAMI,QAAQ,GAAGF,SAAS,CAACA,SAAV,CAAoBG,GAAG,IAAI;AAC1C,kBAAgBC,EAAhB,CAAmBC,IAAnB,EAAuC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AACrC,QAAI,CAACD,IAAL,EAAW;AACT,YAAM,IAAIE,KAAJ,CAAU,+BAAV,CAAN;AACD;;AACD,UAAMC,GAAG,GAAG,MAAML,GAAG,CAACM,IAAJ,CAAS,UAAT,EAAqB;AACrCC,MAAAA,MAAM,EAAEJ,OAAO,CAACI,MADqB;AAErCC,MAAAA,YAAY,EAAEV,iBAAiB,CAACA,iBAAlB,CAAoC;AAChDW,QAAAA,GAAG,EAAEf,GAAG,CAACgB,GAAJ,CAAQC,KAAR,CAAcT,IAAd,IAAuB,SAASA,IAAM,EAAtC,GAA0CA,IADC;AAEhDU,QAAAA,IAAI,EAAE,IAF0C;AAGhD,WAAGT,OAH6C;AAIhDU,QAAAA,MAAM,EAAE;AAJwC,OAApC,CAFuB;AAQrCC,MAAAA,OAAO,EAAEX,OAAO,CAACW;AARoB,KAArB,CAAlB;;AAUA,eAAW,MAAMC,MAAjB,IAA2BV,GAAG,CAACW,MAAJ,EAA3B,EAAyC;AACvC,UAAI,aAAaD,MAAjB,EAAyB;AACvB,aAAK,MAAME,KAAX,IAAoBF,MAAM,CAACG,OAAP,IAAkB,EAAtC,EAA0C;AACxC,gBAAMC,eAAe,CAACvB,yBAAyB,CAACA,yBAA1B,CAAoDqB,KAApD,CAAD,CAArB;AACD;AACF,OAJD,MAIO;AACL,cAAME,eAAe,CAACvB,yBAAyB,CAACA,yBAA1B,CAAoDmB,MAApD,CAAD,CAArB;AACD;AACF;AACF;;AACD,SAAOd,EAAP;AACD,CA1BgB,CAAjB;;AA2BA,SAASkB,eAAT,CAAyBF,KAAzB,EAAgC;AAC9B,MAAIA,KAAK,CAACG,IAAV,EAAgB;AACdH,IAAAA,KAAK,CAACvB,GAAN,GAAYA,GAAG,CAACgB,GAAJ,CAAQW,KAAR,CAAcJ,KAAK,CAACG,IAApB,CAAZ;AACD;;AACD,SAAOH,KAAK,CAACG,IAAb;AACAH,EAAAA,KAAK,CAACK,IAAN,GAAaL,KAAK,CAACK,IAAN,KAAe,CAAf,GAAmB,WAAnB,GAAiC,MAA9C;AACA,SAAOL,KAAP;AACD;;AAEDzB,OAAO,CAACO,QAAR,GAAmBA,QAAnB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar cid = require('multiformats/cid');\nvar objectToCamelWithMetadata = require('../lib/object-to-camel-with-metadata.js');\nvar configure = require('../lib/configure.js');\nvar toUrlSearchParams = require('../lib/to-url-search-params.js');\n\nconst createLs = configure.configure(api => {\n  async function* ls(path, options = {}) {\n    if (!path) {\n      throw new Error('ipfs.files.ls requires a path');\n    }\n    const res = await api.post('files/ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams.toUrlSearchParams({\n        arg: cid.CID.asCID(path) ? `/ipfs/${ path }` : path,\n        long: true,\n        ...options,\n        stream: true\n      }),\n      headers: options.headers\n    });\n    for await (const result of res.ndjson()) {\n      if ('Entries' in result) {\n        for (const entry of result.Entries || []) {\n          yield toCoreInterface(objectToCamelWithMetadata.objectToCamelWithMetadata(entry));\n        }\n      } else {\n        yield toCoreInterface(objectToCamelWithMetadata.objectToCamelWithMetadata(result));\n      }\n    }\n  }\n  return ls;\n});\nfunction toCoreInterface(entry) {\n  if (entry.hash) {\n    entry.cid = cid.CID.parse(entry.hash);\n  }\n  delete entry.hash;\n  entry.type = entry.type === 1 ? 'directory' : 'file';\n  return entry;\n}\n\nexports.createLs = createLs;\n"]},"metadata":{},"sourceType":"script"}