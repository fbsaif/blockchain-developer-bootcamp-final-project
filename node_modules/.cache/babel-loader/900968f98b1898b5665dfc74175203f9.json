{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar multiaddr = require('multiaddr');\n\nvar configure = require('../lib/configure.js');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params.js');\n\nvar responseTypes = require('./response-types.js');\n\nconst createFindProvs = configure.configure(api => {\n  async function* findProvs(cid) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const res = await api.post('dht/findprovs', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams.toUrlSearchParams({\n        arg: cid.toString(),\n        ...options\n      }),\n      headers: options.headers\n    });\n\n    for await (const message of res.ndjson()) {\n      if (message.Type === responseTypes.Provider && message.Responses) {\n        for (const {\n          ID,\n          Addrs\n        } of message.Responses) {\n          yield {\n            id: ID,\n            addrs: (Addrs || []).map(a => new multiaddr.Multiaddr(a))\n          };\n        }\n      }\n    }\n  }\n\n  return findProvs;\n});\nexports.createFindProvs = createFindProvs;","map":{"version":3,"sources":["/Users/intvirtue/Last-final/node_modules/ipfs-http-client/cjs/src/dht/find-provs.js"],"names":["Object","defineProperty","exports","value","multiaddr","require","configure","toUrlSearchParams","responseTypes","createFindProvs","api","findProvs","cid","options","res","post","signal","searchParams","arg","toString","headers","message","ndjson","Type","Provider","Responses","ID","Addrs","id","addrs","map","a","Multiaddr"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AAEA,IAAIC,SAAS,GAAGC,OAAO,CAAC,WAAD,CAAvB;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,qBAAD,CAAvB;;AACA,IAAIE,iBAAiB,GAAGF,OAAO,CAAC,gCAAD,CAA/B;;AACA,IAAIG,aAAa,GAAGH,OAAO,CAAC,qBAAD,CAA3B;;AAEA,MAAMI,eAAe,GAAGH,SAAS,CAACA,SAAV,CAAoBI,GAAG,IAAI;AACjD,kBAAgBC,SAAhB,CAA0BC,GAA1B,EAA6C;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AAC3C,UAAMC,GAAG,GAAG,MAAMJ,GAAG,CAACK,IAAJ,CAAS,eAAT,EAA0B;AAC1CC,MAAAA,MAAM,EAAEH,OAAO,CAACG,MAD0B;AAE1CC,MAAAA,YAAY,EAAEV,iBAAiB,CAACA,iBAAlB,CAAoC;AAChDW,QAAAA,GAAG,EAAEN,GAAG,CAACO,QAAJ,EAD2C;AAEhD,WAAGN;AAF6C,OAApC,CAF4B;AAM1CO,MAAAA,OAAO,EAAEP,OAAO,CAACO;AANyB,KAA1B,CAAlB;;AAQA,eAAW,MAAMC,OAAjB,IAA4BP,GAAG,CAACQ,MAAJ,EAA5B,EAA0C;AACxC,UAAID,OAAO,CAACE,IAAR,KAAiBf,aAAa,CAACgB,QAA/B,IAA2CH,OAAO,CAACI,SAAvD,EAAkE;AAChE,aAAK,MAAM;AAACC,UAAAA,EAAD;AAAKC,UAAAA;AAAL,SAAX,IAA0BN,OAAO,CAACI,SAAlC,EAA6C;AAC3C,gBAAM;AACJG,YAAAA,EAAE,EAAEF,EADA;AAEJG,YAAAA,KAAK,EAAE,CAACF,KAAK,IAAI,EAAV,EAAcG,GAAd,CAAkBC,CAAC,IAAI,IAAI3B,SAAS,CAAC4B,SAAd,CAAwBD,CAAxB,CAAvB;AAFH,WAAN;AAID;AACF;AACF;AACF;;AACD,SAAOpB,SAAP;AACD,CAtBuB,CAAxB;AAwBAT,OAAO,CAACO,eAAR,GAA0BA,eAA1B","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar multiaddr = require('multiaddr');\nvar configure = require('../lib/configure.js');\nvar toUrlSearchParams = require('../lib/to-url-search-params.js');\nvar responseTypes = require('./response-types.js');\n\nconst createFindProvs = configure.configure(api => {\n  async function* findProvs(cid, options = {}) {\n    const res = await api.post('dht/findprovs', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams.toUrlSearchParams({\n        arg: cid.toString(),\n        ...options\n      }),\n      headers: options.headers\n    });\n    for await (const message of res.ndjson()) {\n      if (message.Type === responseTypes.Provider && message.Responses) {\n        for (const {ID, Addrs} of message.Responses) {\n          yield {\n            id: ID,\n            addrs: (Addrs || []).map(a => new multiaddr.Multiaddr(a))\n          };\n        }\n      }\n    }\n  }\n  return findProvs;\n});\n\nexports.createFindProvs = createFindProvs;\n"]},"metadata":{},"sourceType":"script"}