{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar cid = require('multiformats/cid');\n\nvar configure = require('./lib/configure.js');\n\nvar toUrlSearchParams = require('./lib/to-url-search-params.js');\n\nvar stat = require('./files/stat.js');\n\nconst createLs = configure.configure((api, opts) => {\n  async function* ls(path) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const pathStr = `${path instanceof Uint8Array ? cid.CID.decode(path) : path}`;\n\n    async function mapLink(link) {\n      let hash = link.Hash;\n\n      if (hash.includes('/')) {\n        const ipfsPath = hash.startsWith('/ipfs/') ? hash : `/ipfs/${hash}`;\n        const stats = await stat.createStat(opts)(ipfsPath);\n        hash = stats.cid;\n      } else {\n        hash = cid.CID.parse(hash);\n      }\n\n      const entry = {\n        name: link.Name,\n        path: pathStr + (link.Name ? `/${link.Name}` : ''),\n        size: link.Size,\n        cid: hash,\n        type: typeOf(link)\n      };\n\n      if (link.Mode) {\n        entry.mode = parseInt(link.Mode, 8);\n      }\n\n      if (link.Mtime !== undefined && link.Mtime !== null) {\n        entry.mtime = {\n          secs: link.Mtime\n        };\n\n        if (link.MtimeNsecs !== undefined && link.MtimeNsecs !== null) {\n          entry.mtime.nsecs = link.MtimeNsecs;\n        }\n      }\n\n      return entry;\n    }\n\n    const res = await api.post('ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams.toUrlSearchParams({\n        arg: pathStr,\n        ...options\n      }),\n      headers: options.headers\n    });\n\n    for await (let result of res.ndjson()) {\n      result = result.Objects;\n\n      if (!result) {\n        throw new Error('expected .Objects in results');\n      }\n\n      result = result[0];\n\n      if (!result) {\n        throw new Error('expected one array in results.Objects');\n      }\n\n      const links = result.Links;\n\n      if (!Array.isArray(links)) {\n        throw new Error('expected one array in results.Objects[0].Links');\n      }\n\n      if (!links.length) {\n        yield mapLink(result);\n        return;\n      }\n\n      yield* links.map(mapLink);\n    }\n  }\n\n  return ls;\n});\n\nfunction typeOf(link) {\n  switch (link.Type) {\n    case 1:\n    case 5:\n      return 'dir';\n\n    case 2:\n      return 'file';\n\n    default:\n      return 'file';\n  }\n}\n\nexports.createLs = createLs;","map":{"version":3,"sources":["/Users/intvirtue/Last-final/node_modules/ipfs-http-client/cjs/src/ls.js"],"names":["Object","defineProperty","exports","value","cid","require","configure","toUrlSearchParams","stat","createLs","api","opts","ls","path","options","pathStr","Uint8Array","CID","decode","mapLink","link","hash","Hash","includes","ipfsPath","startsWith","stats","createStat","parse","entry","name","Name","size","Size","type","typeOf","Mode","mode","parseInt","Mtime","undefined","mtime","secs","MtimeNsecs","nsecs","res","post","signal","searchParams","arg","headers","result","ndjson","Objects","Error","links","Links","Array","isArray","length","map","Type"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar cid = require('multiformats/cid');\nvar configure = require('./lib/configure.js');\nvar toUrlSearchParams = require('./lib/to-url-search-params.js');\nvar stat = require('./files/stat.js');\n\nconst createLs = configure.configure((api, opts) => {\n  async function* ls(path, options = {}) {\n    const pathStr = `${ path instanceof Uint8Array ? cid.CID.decode(path) : path }`;\n    async function mapLink(link) {\n      let hash = link.Hash;\n      if (hash.includes('/')) {\n        const ipfsPath = hash.startsWith('/ipfs/') ? hash : `/ipfs/${ hash }`;\n        const stats = await stat.createStat(opts)(ipfsPath);\n        hash = stats.cid;\n      } else {\n        hash = cid.CID.parse(hash);\n      }\n      const entry = {\n        name: link.Name,\n        path: pathStr + (link.Name ? `/${ link.Name }` : ''),\n        size: link.Size,\n        cid: hash,\n        type: typeOf(link)\n      };\n      if (link.Mode) {\n        entry.mode = parseInt(link.Mode, 8);\n      }\n      if (link.Mtime !== undefined && link.Mtime !== null) {\n        entry.mtime = { secs: link.Mtime };\n        if (link.MtimeNsecs !== undefined && link.MtimeNsecs !== null) {\n          entry.mtime.nsecs = link.MtimeNsecs;\n        }\n      }\n      return entry;\n    }\n    const res = await api.post('ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams.toUrlSearchParams({\n        arg: pathStr,\n        ...options\n      }),\n      headers: options.headers\n    });\n    for await (let result of res.ndjson()) {\n      result = result.Objects;\n      if (!result) {\n        throw new Error('expected .Objects in results');\n      }\n      result = result[0];\n      if (!result) {\n        throw new Error('expected one array in results.Objects');\n      }\n      const links = result.Links;\n      if (!Array.isArray(links)) {\n        throw new Error('expected one array in results.Objects[0].Links');\n      }\n      if (!links.length) {\n        yield mapLink(result);\n        return;\n      }\n      yield* links.map(mapLink);\n    }\n  }\n  return ls;\n});\nfunction typeOf(link) {\n  switch (link.Type) {\n  case 1:\n  case 5:\n    return 'dir';\n  case 2:\n    return 'file';\n  default:\n    return 'file';\n  }\n}\n\nexports.createLs = createLs;\n"]},"metadata":{},"sourceType":"script"}