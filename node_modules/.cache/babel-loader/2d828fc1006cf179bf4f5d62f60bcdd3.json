{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar multiaddr = require('multiaddr');\n\nvar objectToCamel = require('../lib/object-to-camel.js');\n\nvar configure = require('../lib/configure.js');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params.js');\n\nconst createProvide = configure.configure(api => {\n  async function* provide(cids) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      recursive: false\n    };\n    const cidArr = Array.isArray(cids) ? cids : [cids];\n    const res = await api.post('dht/provide', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams.toUrlSearchParams({\n        arg: cidArr.map(cid => cid.toString()),\n        ...options\n      }),\n      headers: options.headers\n    });\n\n    for await (let message of res.ndjson()) {\n      message = objectToCamel.objectToCamel(message);\n\n      if (message.responses) {\n        message.responses = message.responses.map(_ref => {\n          let {\n            ID,\n            Addrs\n          } = _ref;\n          return {\n            id: ID,\n            addrs: (Addrs || []).map(a => new multiaddr.Multiaddr(a))\n          };\n        });\n      } else {\n        message.responses = [];\n      }\n\n      yield message;\n    }\n  }\n\n  return provide;\n});\nexports.createProvide = createProvide;","map":{"version":3,"sources":["/Users/intvirtue/Last-final/node_modules/ipfs-http-client/cjs/src/dht/provide.js"],"names":["Object","defineProperty","exports","value","multiaddr","require","objectToCamel","configure","toUrlSearchParams","createProvide","api","provide","cids","options","recursive","cidArr","Array","isArray","res","post","signal","searchParams","arg","map","cid","toString","headers","message","ndjson","responses","ID","Addrs","id","addrs","a","Multiaddr"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AAEA,IAAIC,SAAS,GAAGC,OAAO,CAAC,WAAD,CAAvB;;AACA,IAAIC,aAAa,GAAGD,OAAO,CAAC,2BAAD,CAA3B;;AACA,IAAIE,SAAS,GAAGF,OAAO,CAAC,qBAAD,CAAvB;;AACA,IAAIG,iBAAiB,GAAGH,OAAO,CAAC,gCAAD,CAA/B;;AAEA,MAAMI,aAAa,GAAGF,SAAS,CAACA,SAAV,CAAoBG,GAAG,IAAI;AAC/C,kBAAgBC,OAAhB,CAAwBC,IAAxB,EAA8D;AAAA,QAAhCC,OAAgC,uEAAtB;AAAEC,MAAAA,SAAS,EAAE;AAAb,KAAsB;AAC5D,UAAMC,MAAM,GAAGC,KAAK,CAACC,OAAN,CAAcL,IAAd,IAAsBA,IAAtB,GAA6B,CAACA,IAAD,CAA5C;AACA,UAAMM,GAAG,GAAG,MAAMR,GAAG,CAACS,IAAJ,CAAS,aAAT,EAAwB;AACxCC,MAAAA,MAAM,EAAEP,OAAO,CAACO,MADwB;AAExCC,MAAAA,YAAY,EAAEb,iBAAiB,CAACA,iBAAlB,CAAoC;AAChDc,QAAAA,GAAG,EAAEP,MAAM,CAACQ,GAAP,CAAWC,GAAG,IAAIA,GAAG,CAACC,QAAJ,EAAlB,CAD2C;AAEhD,WAAGZ;AAF6C,OAApC,CAF0B;AAMxCa,MAAAA,OAAO,EAAEb,OAAO,CAACa;AANuB,KAAxB,CAAlB;;AAQA,eAAW,IAAIC,OAAf,IAA0BT,GAAG,CAACU,MAAJ,EAA1B,EAAwC;AACtCD,MAAAA,OAAO,GAAGrB,aAAa,CAACA,aAAd,CAA4BqB,OAA5B,CAAV;;AACA,UAAIA,OAAO,CAACE,SAAZ,EAAuB;AACrBF,QAAAA,OAAO,CAACE,SAAR,GAAoBF,OAAO,CAACE,SAAR,CAAkBN,GAAlB,CAAsB;AAAA,cAAC;AAACO,YAAAA,EAAD;AAAKC,YAAAA;AAAL,WAAD;AAAA,iBAAkB;AAC1DC,YAAAA,EAAE,EAAEF,EADsD;AAE1DG,YAAAA,KAAK,EAAE,CAACF,KAAK,IAAI,EAAV,EAAcR,GAAd,CAAkBW,CAAC,IAAI,IAAI9B,SAAS,CAAC+B,SAAd,CAAwBD,CAAxB,CAAvB;AAFmD,WAAlB;AAAA,SAAtB,CAApB;AAID,OALD,MAKO;AACLP,QAAAA,OAAO,CAACE,SAAR,GAAoB,EAApB;AACD;;AACD,YAAMF,OAAN;AACD;AACF;;AACD,SAAOhB,OAAP;AACD,CAzBqB,CAAtB;AA2BAT,OAAO,CAACO,aAAR,GAAwBA,aAAxB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar multiaddr = require('multiaddr');\nvar objectToCamel = require('../lib/object-to-camel.js');\nvar configure = require('../lib/configure.js');\nvar toUrlSearchParams = require('../lib/to-url-search-params.js');\n\nconst createProvide = configure.configure(api => {\n  async function* provide(cids, options = { recursive: false }) {\n    const cidArr = Array.isArray(cids) ? cids : [cids];\n    const res = await api.post('dht/provide', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams.toUrlSearchParams({\n        arg: cidArr.map(cid => cid.toString()),\n        ...options\n      }),\n      headers: options.headers\n    });\n    for await (let message of res.ndjson()) {\n      message = objectToCamel.objectToCamel(message);\n      if (message.responses) {\n        message.responses = message.responses.map(({ID, Addrs}) => ({\n          id: ID,\n          addrs: (Addrs || []).map(a => new multiaddr.Multiaddr(a))\n        }));\n      } else {\n        message.responses = [];\n      }\n      yield message;\n    }\n  }\n  return provide;\n});\n\nexports.createProvide = createProvide;\n"]},"metadata":{},"sourceType":"script"}