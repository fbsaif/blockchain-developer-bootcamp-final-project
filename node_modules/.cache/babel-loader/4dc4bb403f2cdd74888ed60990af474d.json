{"ast":null,"code":"const {\n  AbortController\n} = require('native-abort-controller');\n/**\n * Takes an array of AbortSignals and returns a single signal.\n * If any signals are aborted, the returned signal will be aborted.\n * @param {Array<AbortSignal>} signals\n * @returns {AbortSignal}\n */\n\n\nfunction anySignal(signals) {\n  const controller = new AbortController();\n\n  function onAbort() {\n    controller.abort();\n\n    for (const signal of signals) {\n      if (!signal || !signal.removeEventListener) continue;\n      signal.removeEventListener('abort', onAbort);\n    }\n  }\n\n  for (const signal of signals) {\n    if (!signal || !signal.addEventListener) continue;\n\n    if (signal.aborted) {\n      onAbort();\n      break;\n    }\n\n    signal.addEventListener('abort', onAbort);\n  }\n\n  return controller.signal;\n}\n\nmodule.exports = anySignal;\nmodule.exports.anySignal = anySignal;","map":{"version":3,"sources":["/Users/intvirtue/Last-final/node_modules/any-signal/index.js"],"names":["AbortController","require","anySignal","signals","controller","onAbort","abort","signal","removeEventListener","addEventListener","aborted","module","exports"],"mappings":"AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAsBC,OAAO,CAAC,yBAAD,CAAnC;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,SAAT,CAAoBC,OAApB,EAA6B;AAC3B,QAAMC,UAAU,GAAG,IAAIJ,eAAJ,EAAnB;;AAEA,WAASK,OAAT,GAAoB;AAClBD,IAAAA,UAAU,CAACE,KAAX;;AAEA,SAAK,MAAMC,MAAX,IAAqBJ,OAArB,EAA8B;AAC5B,UAAI,CAACI,MAAD,IAAW,CAACA,MAAM,CAACC,mBAAvB,EAA4C;AAC5CD,MAAAA,MAAM,CAACC,mBAAP,CAA2B,OAA3B,EAAoCH,OAApC;AACD;AACF;;AAED,OAAK,MAAME,MAAX,IAAqBJ,OAArB,EAA8B;AAC5B,QAAI,CAACI,MAAD,IAAW,CAACA,MAAM,CAACE,gBAAvB,EAAyC;;AACzC,QAAIF,MAAM,CAACG,OAAX,EAAoB;AAClBL,MAAAA,OAAO;AACP;AACD;;AACDE,IAAAA,MAAM,CAACE,gBAAP,CAAwB,OAAxB,EAAiCJ,OAAjC;AACD;;AAED,SAAOD,UAAU,CAACG,MAAlB;AACD;;AAEDI,MAAM,CAACC,OAAP,GAAiBV,SAAjB;AACAS,MAAM,CAACC,OAAP,CAAeV,SAAf,GAA2BA,SAA3B","sourcesContent":["const { AbortController } = require('native-abort-controller')\n\n/**\n * Takes an array of AbortSignals and returns a single signal.\n * If any signals are aborted, the returned signal will be aborted.\n * @param {Array<AbortSignal>} signals\n * @returns {AbortSignal}\n */\nfunction anySignal (signals) {\n  const controller = new AbortController()\n\n  function onAbort () {\n    controller.abort()\n\n    for (const signal of signals) {\n      if (!signal || !signal.removeEventListener) continue\n      signal.removeEventListener('abort', onAbort)\n    }\n  }\n\n  for (const signal of signals) {\n    if (!signal || !signal.addEventListener) continue\n    if (signal.aborted) {\n      onAbort()\n      break\n    }\n    signal.addEventListener('abort', onAbort)\n  }\n\n  return controller.signal\n}\n\nmodule.exports = anySignal\nmodule.exports.anySignal = anySignal\n"]},"metadata":{},"sourceType":"script"}