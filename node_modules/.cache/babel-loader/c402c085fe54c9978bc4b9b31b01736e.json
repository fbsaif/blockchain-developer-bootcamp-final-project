{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar configure = require('../lib/configure.js');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params.js');\n\nvar responseTypes = require('./response-types.js');\n\nvar fromString = require('uint8arrays/from-string');\n\nvar toString = require('uint8arrays/to-string');\n\nconst createGet = configure.configure(api => {\n  async function get(key) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const res = await api.post('dht/get', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams.toUrlSearchParams({\n        arg: key instanceof Uint8Array ? toString.toString(key) : key,\n        ...options\n      }),\n      headers: options.headers\n    });\n\n    for await (const message of res.ndjson()) {\n      if (message.Type === responseTypes.Value) {\n        return fromString.fromString(message.Extra, 'base64pad');\n      }\n    }\n\n    throw new Error('not found');\n  }\n\n  return get;\n});\nexports.createGet = createGet;","map":{"version":3,"sources":["/Users/intvirtue/Last-final/node_modules/ipfs-http-client/cjs/src/dht/get.js"],"names":["Object","defineProperty","exports","value","configure","require","toUrlSearchParams","responseTypes","fromString","toString","createGet","api","get","key","options","res","post","signal","searchParams","arg","Uint8Array","headers","message","ndjson","Type","Value","Extra","Error"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AAEA,IAAIC,SAAS,GAAGC,OAAO,CAAC,qBAAD,CAAvB;;AACA,IAAIC,iBAAiB,GAAGD,OAAO,CAAC,gCAAD,CAA/B;;AACA,IAAIE,aAAa,GAAGF,OAAO,CAAC,qBAAD,CAA3B;;AACA,IAAIG,UAAU,GAAGH,OAAO,CAAC,yBAAD,CAAxB;;AACA,IAAII,QAAQ,GAAGJ,OAAO,CAAC,uBAAD,CAAtB;;AAEA,MAAMK,SAAS,GAAGN,SAAS,CAACA,SAAV,CAAoBO,GAAG,IAAI;AAC3C,iBAAeC,GAAf,CAAmBC,GAAnB,EAAsC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AACpC,UAAMC,GAAG,GAAG,MAAMJ,GAAG,CAACK,IAAJ,CAAS,SAAT,EAAoB;AACpCC,MAAAA,MAAM,EAAEH,OAAO,CAACG,MADoB;AAEpCC,MAAAA,YAAY,EAAEZ,iBAAiB,CAACA,iBAAlB,CAAoC;AAChDa,QAAAA,GAAG,EAAEN,GAAG,YAAYO,UAAf,GAA4BX,QAAQ,CAACA,QAAT,CAAkBI,GAAlB,CAA5B,GAAqDA,GADV;AAEhD,WAAGC;AAF6C,OAApC,CAFsB;AAMpCO,MAAAA,OAAO,EAAEP,OAAO,CAACO;AANmB,KAApB,CAAlB;;AAQA,eAAW,MAAMC,OAAjB,IAA4BP,GAAG,CAACQ,MAAJ,EAA5B,EAA0C;AACxC,UAAID,OAAO,CAACE,IAAR,KAAiBjB,aAAa,CAACkB,KAAnC,EAA0C;AACxC,eAAOjB,UAAU,CAACA,UAAX,CAAsBc,OAAO,CAACI,KAA9B,EAAqC,WAArC,CAAP;AACD;AACF;;AACD,UAAM,IAAIC,KAAJ,CAAU,WAAV,CAAN;AACD;;AACD,SAAOf,GAAP;AACD,CAlBiB,CAAlB;AAoBAV,OAAO,CAACQ,SAAR,GAAoBA,SAApB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar configure = require('../lib/configure.js');\nvar toUrlSearchParams = require('../lib/to-url-search-params.js');\nvar responseTypes = require('./response-types.js');\nvar fromString = require('uint8arrays/from-string');\nvar toString = require('uint8arrays/to-string');\n\nconst createGet = configure.configure(api => {\n  async function get(key, options = {}) {\n    const res = await api.post('dht/get', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams.toUrlSearchParams({\n        arg: key instanceof Uint8Array ? toString.toString(key) : key,\n        ...options\n      }),\n      headers: options.headers\n    });\n    for await (const message of res.ndjson()) {\n      if (message.Type === responseTypes.Value) {\n        return fromString.fromString(message.Extra, 'base64pad');\n      }\n    }\n    throw new Error('not found');\n  }\n  return get;\n});\n\nexports.createGet = createGet;\n"]},"metadata":{},"sourceType":"script"}