{"ast":null,"code":"import _regeneratorRuntime from\"/Users/intvirtue/Last-final/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/intvirtue/Last-final/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";// constants\nimport Web3 from\"web3\";import GoodNFT from\"/Users/intvirtue/Last-final/src/contracts/GoodNFT.json\";// log\nimport{fetchData}from\"../data/dataActions\";var connectRequest=function connectRequest(){return{type:\"CONNECTION_REQUEST\"};};var connectSuccess=function connectSuccess(payload){return{type:\"CONNECTION_SUCCESS\",payload:payload};};var connectFailed=function connectFailed(payload){return{type:\"CONNECTION_FAILED\",payload:payload};};var updateAccountRequest=function updateAccountRequest(payload){return{type:\"UPDATE_ACCOUNT\",payload:payload};};export var connect=function connect(){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var web3,accounts,networkId,NetworkData,GoodNFTObj;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:dispatch(connectRequest());if(!window.ethereum){_context.next=21;break;}web3=new Web3(window.ethereum);_context.prev=3;_context.next=6;return window.ethereum.request({method:\"eth_accounts\"});case 6:accounts=_context.sent;_context.next=9;return window.ethereum.request({method:\"net_version\"});case 9:networkId=_context.sent;_context.next=12;return GoodNFT.networks[networkId];case 12:NetworkData=_context.sent;if(NetworkData){GoodNFTObj=new web3.eth.Contract(GoodNFT.abi,NetworkData.address);dispatch(connectSuccess({account:accounts[0],smartContract:GoodNFTObj,web3:web3}));// Add listeners start\nwindow.ethereum.on(\"accountsChanged\",function(accounts){window.location.reload();dispatch(updateAccount(accounts[0]));});window.ethereum.on(\"chainChanged\",function(){window.location.reload();});// Add listeners end\n}else{dispatch(connectFailed(\"Change network to Ropsten Testnet.\"));}_context.next=19;break;case 16:_context.prev=16;_context.t0=_context[\"catch\"](3);dispatch(connectFailed(\"Something went wrong.\"));case 19:_context.next=22;break;case 21:dispatch(connectFailed(\"Install Metamask.\"));case 22:case\"end\":return _context.stop();}}},_callee,null,[[3,16]]);}));return function(_x){return _ref.apply(this,arguments);};}();};export var updateAccount=function updateAccount(account){return/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:dispatch(updateAccountRequest({account:account}));dispatch(fetchData(account));case 2:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x2){return _ref2.apply(this,arguments);};}();};","map":{"version":3,"sources":["/Users/intvirtue/Last-final/src/redux/blockchain/blockchainActions.js"],"names":["Web3","GoodNFT","fetchData","connectRequest","type","connectSuccess","payload","connectFailed","updateAccountRequest","connect","dispatch","window","ethereum","web3","request","method","accounts","networkId","networks","NetworkData","GoodNFTObj","eth","Contract","abi","address","account","smartContract","on","location","reload","updateAccount"],"mappings":"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","sourcesContent":["// constants\nimport Web3 from \"web3\";\nimport GoodNFT from \"/Users/intvirtue/Last-final/src/contracts/GoodNFT.json\";\n// log\nimport { fetchData } from \"../data/dataActions\";\n\nconst connectRequest = () => {\n  return {\n    type: \"CONNECTION_REQUEST\",\n  };\n};\n\nconst connectSuccess = (payload) => {\n  return {\n    type: \"CONNECTION_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst connectFailed = (payload) => {\n  return {\n    type: \"CONNECTION_FAILED\",\n    payload: payload,\n  };\n};\n\nconst updateAccountRequest = (payload) => {\n  return {\n    type: \"UPDATE_ACCOUNT\",\n    payload: payload,\n  };\n};\n\nexport const connect = () => {\n  return async (dispatch) => {\n    dispatch(connectRequest());\n    if (window.ethereum) {\n      let web3 = new Web3(window.ethereum);\n      try {\n        const accounts = await window.ethereum.request({\n          method: \"eth_accounts\",\n        });\n        const networkId = await window.ethereum.request({\n          method: \"net_version\",\n        });\n        const NetworkData = await GoodNFT.networks[networkId];\n        if (NetworkData) {\n          const GoodNFTObj = new web3.eth.Contract(\n            GoodNFT.abi,\n            NetworkData.address\n          );\n          dispatch(\n            connectSuccess({\n              account: accounts[0],\n              smartContract: GoodNFTObj,\n              web3: web3,\n            })\n          );\n          // Add listeners start\n          window.ethereum.on(\"accountsChanged\", (accounts) => {\n            window.location.reload();\n            dispatch(updateAccount(accounts[0]));\n\n          });\n          window.ethereum.on(\"chainChanged\", () => {\n            window.location.reload();\n          });\n          // Add listeners end\n        } else {\n          dispatch(connectFailed(\"Change network to Ropsten Testnet.\"));\n        }\n      } catch (err) {\n        dispatch(connectFailed(\"Something went wrong.\"));\n      }\n    } else {\n      dispatch(connectFailed(\"Install Metamask.\"));\n    }\n  };\n};\n\nexport const updateAccount = (account) => {\n  return async (dispatch) => {\n    dispatch(updateAccountRequest({ account: account }));\n    dispatch(fetchData(account));\n  };\n};\n"]},"metadata":{},"sourceType":"module"}