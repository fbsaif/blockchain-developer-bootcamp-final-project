{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar fromString = require('uint8arrays/from-string');\n\nvar toString = require('uint8arrays/to-string');\n\nvar debug = require('debug');\n\nvar configure = require('../lib/configure.js');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params.js');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nvar debug__default = /*#__PURE__*/_interopDefaultLegacy(debug);\n\nconst log = debug__default[\"default\"]('ipfs-http-client:pubsub:subscribe');\n\nconst createSubscribe = (options, subsTracker) => {\n  return configure.configure(api => {\n    async function subscribe(topic, handler) {\n      let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      options.signal = subsTracker.subscribe(topic, handler, options.signal);\n      let done;\n      let fail;\n      const result = new Promise((resolve, reject) => {\n        done = resolve;\n        fail = reject;\n      });\n      const ffWorkaround = setTimeout(() => done(), 1000);\n      api.post('pubsub/sub', {\n        signal: options.signal,\n        searchParams: toUrlSearchParams.toUrlSearchParams({\n          arg: topic,\n          ...options\n        }),\n        headers: options.headers\n      }).catch(err => {\n        subsTracker.unsubscribe(topic, handler);\n        fail(err);\n      }).then(response => {\n        clearTimeout(ffWorkaround);\n\n        if (!response) {\n          return;\n        }\n\n        readMessages(response, {\n          onMessage: handler,\n          onEnd: () => subsTracker.unsubscribe(topic, handler),\n          onError: options.onError\n        });\n        done();\n      });\n      return result;\n    }\n\n    return subscribe;\n  })(options);\n};\n\nasync function readMessages(response, _ref) {\n  let {\n    onMessage,\n    onEnd,\n    onError\n  } = _ref;\n  onError = onError || log;\n\n  try {\n    for await (const msg of response.ndjson()) {\n      try {\n        if (!msg.from) {\n          continue;\n        }\n\n        onMessage({\n          from: toString.toString(fromString.fromString(msg.from, 'base64pad'), 'base58btc'),\n          data: fromString.fromString(msg.data, 'base64pad'),\n          seqno: fromString.fromString(msg.seqno, 'base64pad'),\n          topicIDs: msg.topicIDs\n        });\n      } catch (err) {\n        err.message = `Failed to parse pubsub message: ${err.message}`;\n        onError(err, false, msg);\n      }\n    }\n  } catch (err) {\n    if (!isAbortError(err)) {\n      onError(err, true);\n    }\n  } finally {\n    onEnd();\n  }\n}\n\nconst isAbortError = error => {\n  switch (error.type) {\n    case 'aborted':\n      return true;\n\n    case 'abort':\n      return true;\n\n    default:\n      return error.name === 'AbortError';\n  }\n};\n\nexports.createSubscribe = createSubscribe;","map":{"version":3,"sources":["/Users/intvirtue/Last-final/node_modules/ipfs-http-client/cjs/src/pubsub/subscribe.js"],"names":["Object","defineProperty","exports","value","fromString","require","toString","debug","configure","toUrlSearchParams","_interopDefaultLegacy","e","debug__default","log","createSubscribe","options","subsTracker","api","subscribe","topic","handler","signal","done","fail","result","Promise","resolve","reject","ffWorkaround","setTimeout","post","searchParams","arg","headers","catch","err","unsubscribe","then","response","clearTimeout","readMessages","onMessage","onEnd","onError","msg","ndjson","from","data","seqno","topicIDs","message","isAbortError","error","type","name"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar fromString = require('uint8arrays/from-string');\nvar toString = require('uint8arrays/to-string');\nvar debug = require('debug');\nvar configure = require('../lib/configure.js');\nvar toUrlSearchParams = require('../lib/to-url-search-params.js');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar debug__default = /*#__PURE__*/_interopDefaultLegacy(debug);\n\nconst log = debug__default[\"default\"]('ipfs-http-client:pubsub:subscribe');\nconst createSubscribe = (options, subsTracker) => {\n  return configure.configure(api => {\n    async function subscribe(topic, handler, options = {}) {\n      options.signal = subsTracker.subscribe(topic, handler, options.signal);\n      let done;\n      let fail;\n      const result = new Promise((resolve, reject) => {\n        done = resolve;\n        fail = reject;\n      });\n      const ffWorkaround = setTimeout(() => done(), 1000);\n      api.post('pubsub/sub', {\n        signal: options.signal,\n        searchParams: toUrlSearchParams.toUrlSearchParams({\n          arg: topic,\n          ...options\n        }),\n        headers: options.headers\n      }).catch(err => {\n        subsTracker.unsubscribe(topic, handler);\n        fail(err);\n      }).then(response => {\n        clearTimeout(ffWorkaround);\n        if (!response) {\n          return;\n        }\n        readMessages(response, {\n          onMessage: handler,\n          onEnd: () => subsTracker.unsubscribe(topic, handler),\n          onError: options.onError\n        });\n        done();\n      });\n      return result;\n    }\n    return subscribe;\n  })(options);\n};\nasync function readMessages(response, {onMessage, onEnd, onError}) {\n  onError = onError || log;\n  try {\n    for await (const msg of response.ndjson()) {\n      try {\n        if (!msg.from) {\n          continue;\n        }\n        onMessage({\n          from: toString.toString(fromString.fromString(msg.from, 'base64pad'), 'base58btc'),\n          data: fromString.fromString(msg.data, 'base64pad'),\n          seqno: fromString.fromString(msg.seqno, 'base64pad'),\n          topicIDs: msg.topicIDs\n        });\n      } catch (err) {\n        err.message = `Failed to parse pubsub message: ${ err.message }`;\n        onError(err, false, msg);\n      }\n    }\n  } catch (err) {\n    if (!isAbortError(err)) {\n      onError(err, true);\n    }\n  } finally {\n    onEnd();\n  }\n}\nconst isAbortError = error => {\n  switch (error.type) {\n  case 'aborted':\n    return true;\n  case 'abort':\n    return true;\n  default:\n    return error.name === 'AbortError';\n  }\n};\n\nexports.createSubscribe = createSubscribe;\n"]},"metadata":{},"sourceType":"script"}