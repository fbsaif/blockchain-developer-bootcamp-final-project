{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar modeToString = require('../lib/mode-to-string.js');\n\nvar parseMtime = require('../lib/parse-mtime.js');\n\nvar configure = require('../lib/configure.js');\n\nvar multipartRequest = require('ipfs-core-utils/multipart-request');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params.js');\n\nvar abortSignal = require('../lib/abort-signal.js');\n\nvar nativeAbortController = require('native-abort-controller');\n\nconst createWrite = configure.configure(api => {\n  async function write(path, input) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const controller = new nativeAbortController.AbortController();\n    const signal = abortSignal.abortSignal(controller.signal, options.signal);\n    const res = await api.post('files/write', {\n      signal,\n      searchParams: toUrlSearchParams.toUrlSearchParams({\n        arg: path,\n        streamChannels: true,\n        count: options.length,\n        ...options\n      }),\n      ...(await multipartRequest.multipartRequest([{\n        content: input,\n        path: 'arg',\n        mode: modeToString.modeToString(options.mode),\n        mtime: parseMtime.parseMtime(options.mtime)\n      }], controller, options.headers))\n    });\n    await res.text();\n  }\n\n  return write;\n});\nexports.createWrite = createWrite;","map":{"version":3,"sources":["/Users/intvirtue/Last-final/node_modules/ipfs-http-client/cjs/src/files/write.js"],"names":["Object","defineProperty","exports","value","modeToString","require","parseMtime","configure","multipartRequest","toUrlSearchParams","abortSignal","nativeAbortController","createWrite","api","write","path","input","options","controller","AbortController","signal","res","post","searchParams","arg","streamChannels","count","length","content","mode","mtime","headers","text"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AAEA,IAAIC,YAAY,GAAGC,OAAO,CAAC,0BAAD,CAA1B;;AACA,IAAIC,UAAU,GAAGD,OAAO,CAAC,uBAAD,CAAxB;;AACA,IAAIE,SAAS,GAAGF,OAAO,CAAC,qBAAD,CAAvB;;AACA,IAAIG,gBAAgB,GAAGH,OAAO,CAAC,mCAAD,CAA9B;;AACA,IAAII,iBAAiB,GAAGJ,OAAO,CAAC,gCAAD,CAA/B;;AACA,IAAIK,WAAW,GAAGL,OAAO,CAAC,wBAAD,CAAzB;;AACA,IAAIM,qBAAqB,GAAGN,OAAO,CAAC,yBAAD,CAAnC;;AAEA,MAAMO,WAAW,GAAGL,SAAS,CAACA,SAAV,CAAoBM,GAAG,IAAI;AAC7C,iBAAeC,KAAf,CAAqBC,IAArB,EAA2BC,KAA3B,EAAgD;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AAC9C,UAAMC,UAAU,GAAG,IAAIP,qBAAqB,CAACQ,eAA1B,EAAnB;AACA,UAAMC,MAAM,GAAGV,WAAW,CAACA,WAAZ,CAAwBQ,UAAU,CAACE,MAAnC,EAA2CH,OAAO,CAACG,MAAnD,CAAf;AACA,UAAMC,GAAG,GAAG,MAAMR,GAAG,CAACS,IAAJ,CAAS,aAAT,EAAwB;AACxCF,MAAAA,MADwC;AAExCG,MAAAA,YAAY,EAAEd,iBAAiB,CAACA,iBAAlB,CAAoC;AAChDe,QAAAA,GAAG,EAAET,IAD2C;AAEhDU,QAAAA,cAAc,EAAE,IAFgC;AAGhDC,QAAAA,KAAK,EAAET,OAAO,CAACU,MAHiC;AAIhD,WAAGV;AAJ6C,OAApC,CAF0B;AAQxC,UAAG,MAAMT,gBAAgB,CAACA,gBAAjB,CAAkC,CAAC;AACxCoB,QAAAA,OAAO,EAAEZ,KAD+B;AAExCD,QAAAA,IAAI,EAAE,KAFkC;AAGxCc,QAAAA,IAAI,EAAEzB,YAAY,CAACA,YAAb,CAA0Ba,OAAO,CAACY,IAAlC,CAHkC;AAIxCC,QAAAA,KAAK,EAAExB,UAAU,CAACA,UAAX,CAAsBW,OAAO,CAACa,KAA9B;AAJiC,OAAD,CAAlC,EAKHZ,UALG,EAKSD,OAAO,CAACc,OALjB,CAAT;AARwC,KAAxB,CAAlB;AAeA,UAAMV,GAAG,CAACW,IAAJ,EAAN;AACD;;AACD,SAAOlB,KAAP;AACD,CAtBmB,CAApB;AAwBAZ,OAAO,CAACU,WAAR,GAAsBA,WAAtB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar modeToString = require('../lib/mode-to-string.js');\nvar parseMtime = require('../lib/parse-mtime.js');\nvar configure = require('../lib/configure.js');\nvar multipartRequest = require('ipfs-core-utils/multipart-request');\nvar toUrlSearchParams = require('../lib/to-url-search-params.js');\nvar abortSignal = require('../lib/abort-signal.js');\nvar nativeAbortController = require('native-abort-controller');\n\nconst createWrite = configure.configure(api => {\n  async function write(path, input, options = {}) {\n    const controller = new nativeAbortController.AbortController();\n    const signal = abortSignal.abortSignal(controller.signal, options.signal);\n    const res = await api.post('files/write', {\n      signal,\n      searchParams: toUrlSearchParams.toUrlSearchParams({\n        arg: path,\n        streamChannels: true,\n        count: options.length,\n        ...options\n      }),\n      ...await multipartRequest.multipartRequest([{\n          content: input,\n          path: 'arg',\n          mode: modeToString.modeToString(options.mode),\n          mtime: parseMtime.parseMtime(options.mtime)\n        }], controller, options.headers)\n    });\n    await res.text();\n  }\n  return write;\n});\n\nexports.createWrite = createWrite;\n"]},"metadata":{},"sourceType":"script"}