{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar digest = require('./digest.js');\n\nconst from = _ref => {\n  let {\n    name,\n    code,\n    encode\n  } = _ref;\n  return new Hasher(name, code, encode);\n};\n\nclass Hasher {\n  constructor(name, code, encode) {\n    this.name = name;\n    this.code = code;\n    this.encode = encode;\n  }\n\n  async digest(input) {\n    if (input instanceof Uint8Array) {\n      const digest$1 = await this.encode(input);\n      return digest.create(this.code, digest$1);\n    } else {\n      throw Error('Unknown type, must be binary type');\n    }\n  }\n\n}\n\nexports.Hasher = Hasher;\nexports.from = from;","map":{"version":3,"sources":["/Users/intvirtue/Last-final/node_modules/multiformats/cjs/src/hashes/hasher.js"],"names":["Object","defineProperty","exports","value","digest","require","from","name","code","encode","Hasher","constructor","input","Uint8Array","digest$1","create","Error"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AAEA,IAAIC,MAAM,GAAGC,OAAO,CAAC,aAAD,CAApB;;AAEA,MAAMC,IAAI,GAAG;AAAA,MAAC;AAACC,IAAAA,IAAD;AAAOC,IAAAA,IAAP;AAAaC,IAAAA;AAAb,GAAD;AAAA,SAA0B,IAAIC,MAAJ,CAAWH,IAAX,EAAiBC,IAAjB,EAAuBC,MAAvB,CAA1B;AAAA,CAAb;;AACA,MAAMC,MAAN,CAAa;AACXC,EAAAA,WAAW,CAACJ,IAAD,EAAOC,IAAP,EAAaC,MAAb,EAAqB;AAC9B,SAAKF,IAAL,GAAYA,IAAZ;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,MAAL,GAAcA,MAAd;AACD;;AACW,QAANL,MAAM,CAACQ,KAAD,EAAQ;AAClB,QAAIA,KAAK,YAAYC,UAArB,EAAiC;AAC/B,YAAMC,QAAQ,GAAG,MAAM,KAAKL,MAAL,CAAYG,KAAZ,CAAvB;AACA,aAAOR,MAAM,CAACW,MAAP,CAAc,KAAKP,IAAnB,EAAyBM,QAAzB,CAAP;AACD,KAHD,MAGO;AACL,YAAME,KAAK,CAAC,mCAAD,CAAX;AACD;AACF;;AAbU;;AAgBbd,OAAO,CAACQ,MAAR,GAAiBA,MAAjB;AACAR,OAAO,CAACI,IAAR,GAAeA,IAAf","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar digest = require('./digest.js');\n\nconst from = ({name, code, encode}) => new Hasher(name, code, encode);\nclass Hasher {\n  constructor(name, code, encode) {\n    this.name = name;\n    this.code = code;\n    this.encode = encode;\n  }\n  async digest(input) {\n    if (input instanceof Uint8Array) {\n      const digest$1 = await this.encode(input);\n      return digest.create(this.code, digest$1);\n    } else {\n      throw Error('Unknown type, must be binary type');\n    }\n  }\n}\n\nexports.Hasher = Hasher;\nexports.from = from;\n"]},"metadata":{},"sourceType":"script"}