{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar cid = require('multiformats/cid');\n\nvar configure = require('../lib/configure.js');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params.js');\n\nfunction toPin(type, cid$1, metadata) {\n  const pin = {\n    type,\n    cid: cid.CID.parse(cid$1)\n  };\n\n  if (metadata) {\n    pin.metadata = metadata;\n  }\n\n  return pin;\n}\n\nconst createLs = configure.configure(api => {\n  async function* ls() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let paths = [];\n\n    if (options.paths) {\n      paths = Array.isArray(options.paths) ? options.paths : [options.paths];\n    }\n\n    const res = await api.post('pin/ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams.toUrlSearchParams({ ...options,\n        arg: paths.map(path => `${path}`),\n        stream: true\n      }),\n      headers: options.headers\n    });\n\n    for await (const pin of res.ndjson()) {\n      if (pin.Keys) {\n        for (const cid of Object.keys(pin.Keys)) {\n          yield toPin(pin.Keys[cid].Type, cid, pin.Keys[cid].Metadata);\n        }\n\n        return;\n      }\n\n      yield toPin(pin.Type, pin.Cid, pin.Metadata);\n    }\n  }\n\n  return ls;\n});\nexports.createLs = createLs;","map":{"version":3,"sources":["/Users/intvirtue/Last-final/node_modules/ipfs-http-client/cjs/src/pin/ls.js"],"names":["Object","defineProperty","exports","value","cid","require","configure","toUrlSearchParams","toPin","type","cid$1","metadata","pin","CID","parse","createLs","api","ls","options","paths","Array","isArray","res","post","signal","searchParams","arg","map","path","stream","headers","ndjson","Keys","keys","Type","Metadata","Cid"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AAEA,IAAIC,GAAG,GAAGC,OAAO,CAAC,kBAAD,CAAjB;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,qBAAD,CAAvB;;AACA,IAAIE,iBAAiB,GAAGF,OAAO,CAAC,gCAAD,CAA/B;;AAEA,SAASG,KAAT,CAAeC,IAAf,EAAqBC,KAArB,EAA4BC,QAA5B,EAAsC;AACpC,QAAMC,GAAG,GAAG;AACVH,IAAAA,IADU;AAEVL,IAAAA,GAAG,EAAEA,GAAG,CAACS,GAAJ,CAAQC,KAAR,CAAcJ,KAAd;AAFK,GAAZ;;AAIA,MAAIC,QAAJ,EAAc;AACZC,IAAAA,GAAG,CAACD,QAAJ,GAAeA,QAAf;AACD;;AACD,SAAOC,GAAP;AACD;;AACD,MAAMG,QAAQ,GAAGT,SAAS,CAACA,SAAV,CAAoBU,GAAG,IAAI;AAC1C,kBAAgBC,EAAhB,GAAiC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AAC/B,QAAIC,KAAK,GAAG,EAAZ;;AACA,QAAID,OAAO,CAACC,KAAZ,EAAmB;AACjBA,MAAAA,KAAK,GAAGC,KAAK,CAACC,OAAN,CAAcH,OAAO,CAACC,KAAtB,IAA+BD,OAAO,CAACC,KAAvC,GAA+C,CAACD,OAAO,CAACC,KAAT,CAAvD;AACD;;AACD,UAAMG,GAAG,GAAG,MAAMN,GAAG,CAACO,IAAJ,CAAS,QAAT,EAAmB;AACnCC,MAAAA,MAAM,EAAEN,OAAO,CAACM,MADmB;AAEnCC,MAAAA,YAAY,EAAElB,iBAAiB,CAACA,iBAAlB,CAAoC,EAChD,GAAGW,OAD6C;AAEhDQ,QAAAA,GAAG,EAAEP,KAAK,CAACQ,GAAN,CAAUC,IAAI,IAAK,GAAGA,IAAM,EAA5B,CAF2C;AAGhDC,QAAAA,MAAM,EAAE;AAHwC,OAApC,CAFqB;AAOnCC,MAAAA,OAAO,EAAEZ,OAAO,CAACY;AAPkB,KAAnB,CAAlB;;AASA,eAAW,MAAMlB,GAAjB,IAAwBU,GAAG,CAACS,MAAJ,EAAxB,EAAsC;AACpC,UAAInB,GAAG,CAACoB,IAAR,EAAc;AACZ,aAAK,MAAM5B,GAAX,IAAkBJ,MAAM,CAACiC,IAAP,CAAYrB,GAAG,CAACoB,IAAhB,CAAlB,EAAyC;AACvC,gBAAMxB,KAAK,CAACI,GAAG,CAACoB,IAAJ,CAAS5B,GAAT,EAAc8B,IAAf,EAAqB9B,GAArB,EAA0BQ,GAAG,CAACoB,IAAJ,CAAS5B,GAAT,EAAc+B,QAAxC,CAAX;AACD;;AACD;AACD;;AACD,YAAM3B,KAAK,CAACI,GAAG,CAACsB,IAAL,EAAWtB,GAAG,CAACwB,GAAf,EAAoBxB,GAAG,CAACuB,QAAxB,CAAX;AACD;AACF;;AACD,SAAOlB,EAAP;AACD,CA1BgB,CAAjB;AA4BAf,OAAO,CAACa,QAAR,GAAmBA,QAAnB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar cid = require('multiformats/cid');\nvar configure = require('../lib/configure.js');\nvar toUrlSearchParams = require('../lib/to-url-search-params.js');\n\nfunction toPin(type, cid$1, metadata) {\n  const pin = {\n    type,\n    cid: cid.CID.parse(cid$1)\n  };\n  if (metadata) {\n    pin.metadata = metadata;\n  }\n  return pin;\n}\nconst createLs = configure.configure(api => {\n  async function* ls(options = {}) {\n    let paths = [];\n    if (options.paths) {\n      paths = Array.isArray(options.paths) ? options.paths : [options.paths];\n    }\n    const res = await api.post('pin/ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams.toUrlSearchParams({\n        ...options,\n        arg: paths.map(path => `${ path }`),\n        stream: true\n      }),\n      headers: options.headers\n    });\n    for await (const pin of res.ndjson()) {\n      if (pin.Keys) {\n        for (const cid of Object.keys(pin.Keys)) {\n          yield toPin(pin.Keys[cid].Type, cid, pin.Keys[cid].Metadata);\n        }\n        return;\n      }\n      yield toPin(pin.Type, pin.Cid, pin.Metadata);\n    }\n  }\n  return ls;\n});\n\nexports.createLs = createLs;\n"]},"metadata":{},"sourceType":"script"}