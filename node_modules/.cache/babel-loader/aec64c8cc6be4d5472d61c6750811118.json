{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar cid = require('multiformats/cid');\n\nvar configure = require('../lib/configure.js');\n\nvar multipartRequest = require('ipfs-core-utils/multipart-request');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params.js');\n\nvar abortSignal = require('../lib/abort-signal.js');\n\nvar nativeAbortController = require('native-abort-controller');\n\nconst createPut = (codecs, options) => {\n  const fn = configure.configure(api => {\n    const put = async function (dagNode) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      const settings = {\n        format: 'dag-cbor',\n        hashAlg: 'sha2-256',\n        inputEnc: 'raw',\n        ...options\n      };\n      const codec = await codecs.getCodec(settings.format);\n      const serialized = codec.encode(dagNode);\n      const controller = new nativeAbortController.AbortController();\n      const signal = abortSignal.abortSignal(controller.signal, settings.signal);\n      const res = await api.post('dag/put', {\n        timeout: settings.timeout,\n        signal,\n        searchParams: toUrlSearchParams.toUrlSearchParams(settings),\n        ...(await multipartRequest.multipartRequest([serialized], controller, settings.headers))\n      });\n      const data = await res.json();\n      return cid.CID.parse(data.Cid['/']);\n    };\n\n    return put;\n  });\n  return fn(options);\n};\n\nexports.createPut = createPut;","map":{"version":3,"sources":["/Users/intvirtue/Last-final/node_modules/ipfs-http-client/cjs/src/dag/put.js"],"names":["Object","defineProperty","exports","value","cid","require","configure","multipartRequest","toUrlSearchParams","abortSignal","nativeAbortController","createPut","codecs","options","fn","api","put","dagNode","settings","format","hashAlg","inputEnc","codec","getCodec","serialized","encode","controller","AbortController","signal","res","post","timeout","searchParams","headers","data","json","CID","parse","Cid"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AAEA,IAAIC,GAAG,GAAGC,OAAO,CAAC,kBAAD,CAAjB;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,qBAAD,CAAvB;;AACA,IAAIE,gBAAgB,GAAGF,OAAO,CAAC,mCAAD,CAA9B;;AACA,IAAIG,iBAAiB,GAAGH,OAAO,CAAC,gCAAD,CAA/B;;AACA,IAAII,WAAW,GAAGJ,OAAO,CAAC,wBAAD,CAAzB;;AACA,IAAIK,qBAAqB,GAAGL,OAAO,CAAC,yBAAD,CAAnC;;AAEA,MAAMM,SAAS,GAAG,CAACC,MAAD,EAASC,OAAT,KAAqB;AACrC,QAAMC,EAAE,GAAGR,SAAS,CAACA,SAAV,CAAoBS,GAAG,IAAI;AACpC,UAAMC,GAAG,GAAG,gBAAOC,OAAP,EAAiC;AAAA,UAAjBJ,OAAiB,uEAAP,EAAO;AAC3C,YAAMK,QAAQ,GAAG;AACfC,QAAAA,MAAM,EAAE,UADO;AAEfC,QAAAA,OAAO,EAAE,UAFM;AAGfC,QAAAA,QAAQ,EAAE,KAHK;AAIf,WAAGR;AAJY,OAAjB;AAMA,YAAMS,KAAK,GAAG,MAAMV,MAAM,CAACW,QAAP,CAAgBL,QAAQ,CAACC,MAAzB,CAApB;AACA,YAAMK,UAAU,GAAGF,KAAK,CAACG,MAAN,CAAaR,OAAb,CAAnB;AACA,YAAMS,UAAU,GAAG,IAAIhB,qBAAqB,CAACiB,eAA1B,EAAnB;AACA,YAAMC,MAAM,GAAGnB,WAAW,CAACA,WAAZ,CAAwBiB,UAAU,CAACE,MAAnC,EAA2CV,QAAQ,CAACU,MAApD,CAAf;AACA,YAAMC,GAAG,GAAG,MAAMd,GAAG,CAACe,IAAJ,CAAS,SAAT,EAAoB;AACpCC,QAAAA,OAAO,EAAEb,QAAQ,CAACa,OADkB;AAEpCH,QAAAA,MAFoC;AAGpCI,QAAAA,YAAY,EAAExB,iBAAiB,CAACA,iBAAlB,CAAoCU,QAApC,CAHsB;AAIpC,YAAG,MAAMX,gBAAgB,CAACA,gBAAjB,CAAkC,CAACiB,UAAD,CAAlC,EAAgDE,UAAhD,EAA4DR,QAAQ,CAACe,OAArE,CAAT;AAJoC,OAApB,CAAlB;AAMA,YAAMC,IAAI,GAAG,MAAML,GAAG,CAACM,IAAJ,EAAnB;AACA,aAAO/B,GAAG,CAACgC,GAAJ,CAAQC,KAAR,CAAcH,IAAI,CAACI,GAAL,CAAS,GAAT,CAAd,CAAP;AACD,KAnBD;;AAoBA,WAAOtB,GAAP;AACD,GAtBU,CAAX;AAuBA,SAAOF,EAAE,CAACD,OAAD,CAAT;AACD,CAzBD;;AA2BAX,OAAO,CAACS,SAAR,GAAoBA,SAApB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar cid = require('multiformats/cid');\nvar configure = require('../lib/configure.js');\nvar multipartRequest = require('ipfs-core-utils/multipart-request');\nvar toUrlSearchParams = require('../lib/to-url-search-params.js');\nvar abortSignal = require('../lib/abort-signal.js');\nvar nativeAbortController = require('native-abort-controller');\n\nconst createPut = (codecs, options) => {\n  const fn = configure.configure(api => {\n    const put = async (dagNode, options = {}) => {\n      const settings = {\n        format: 'dag-cbor',\n        hashAlg: 'sha2-256',\n        inputEnc: 'raw',\n        ...options\n      };\n      const codec = await codecs.getCodec(settings.format);\n      const serialized = codec.encode(dagNode);\n      const controller = new nativeAbortController.AbortController();\n      const signal = abortSignal.abortSignal(controller.signal, settings.signal);\n      const res = await api.post('dag/put', {\n        timeout: settings.timeout,\n        signal,\n        searchParams: toUrlSearchParams.toUrlSearchParams(settings),\n        ...await multipartRequest.multipartRequest([serialized], controller, settings.headers)\n      });\n      const data = await res.json();\n      return cid.CID.parse(data.Cid['/']);\n    };\n    return put;\n  });\n  return fn(options);\n};\n\nexports.createPut = createPut;\n"]},"metadata":{},"sourceType":"script"}