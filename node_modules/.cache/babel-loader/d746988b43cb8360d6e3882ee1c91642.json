{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar configure = require('../lib/configure.js');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params.js');\n\nvar abortSignal = require('../lib/abort-signal.js');\n\nvar multipartRequest = require('ipfs-core-utils/multipart-request');\n\nvar nativeAbortController = require('native-abort-controller');\n\nvar cid = require('multiformats/cid');\n\nconst createImport = configure.configure(api => {\n  async function* dagImport(source) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const controller = new nativeAbortController.AbortController();\n    const signal = abortSignal.abortSignal(controller.signal, options.signal);\n    const {\n      headers,\n      body\n    } = await multipartRequest.multipartRequest(source, controller, options.headers);\n    const res = await api.post('dag/import', {\n      signal,\n      headers,\n      body,\n      searchParams: toUrlSearchParams.toUrlSearchParams({\n        'pin-roots': options.pinRoots\n      })\n    });\n\n    for await (const {\n      Root\n    } of res.ndjson()) {\n      if (Root !== undefined) {\n        const {\n          Cid: {\n            '/': Cid\n          },\n          PinErrorMsg\n        } = Root;\n        yield {\n          root: {\n            cid: cid.CID.parse(Cid),\n            pinErrorMsg: PinErrorMsg\n          }\n        };\n      }\n    }\n  }\n\n  return dagImport;\n});\nexports.createImport = createImport;","map":{"version":3,"sources":["/Users/intvirtue/Last-final/node_modules/ipfs-http-client/cjs/src/dag/import.js"],"names":["Object","defineProperty","exports","value","configure","require","toUrlSearchParams","abortSignal","multipartRequest","nativeAbortController","cid","createImport","api","dagImport","source","options","controller","AbortController","signal","headers","body","res","post","searchParams","pinRoots","Root","ndjson","undefined","Cid","PinErrorMsg","root","CID","parse","pinErrorMsg"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AAEA,IAAIC,SAAS,GAAGC,OAAO,CAAC,qBAAD,CAAvB;;AACA,IAAIC,iBAAiB,GAAGD,OAAO,CAAC,gCAAD,CAA/B;;AACA,IAAIE,WAAW,GAAGF,OAAO,CAAC,wBAAD,CAAzB;;AACA,IAAIG,gBAAgB,GAAGH,OAAO,CAAC,mCAAD,CAA9B;;AACA,IAAII,qBAAqB,GAAGJ,OAAO,CAAC,yBAAD,CAAnC;;AACA,IAAIK,GAAG,GAAGL,OAAO,CAAC,kBAAD,CAAjB;;AAEA,MAAMM,YAAY,GAAGP,SAAS,CAACA,SAAV,CAAoBQ,GAAG,IAAI;AAC9C,kBAAgBC,SAAhB,CAA0BC,MAA1B,EAAgD;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AAC9C,UAAMC,UAAU,GAAG,IAAIP,qBAAqB,CAACQ,eAA1B,EAAnB;AACA,UAAMC,MAAM,GAAGX,WAAW,CAACA,WAAZ,CAAwBS,UAAU,CAACE,MAAnC,EAA2CH,OAAO,CAACG,MAAnD,CAAf;AACA,UAAM;AAACC,MAAAA,OAAD;AAAUC,MAAAA;AAAV,QAAkB,MAAMZ,gBAAgB,CAACA,gBAAjB,CAAkCM,MAAlC,EAA0CE,UAA1C,EAAsDD,OAAO,CAACI,OAA9D,CAA9B;AACA,UAAME,GAAG,GAAG,MAAMT,GAAG,CAACU,IAAJ,CAAS,YAAT,EAAuB;AACvCJ,MAAAA,MADuC;AAEvCC,MAAAA,OAFuC;AAGvCC,MAAAA,IAHuC;AAIvCG,MAAAA,YAAY,EAAEjB,iBAAiB,CAACA,iBAAlB,CAAoC;AAAE,qBAAaS,OAAO,CAACS;AAAvB,OAApC;AAJyB,KAAvB,CAAlB;;AAMA,eAAW,MAAM;AAACC,MAAAA;AAAD,KAAjB,IAA2BJ,GAAG,CAACK,MAAJ,EAA3B,EAAyC;AACvC,UAAID,IAAI,KAAKE,SAAb,EAAwB;AACtB,cAAM;AACJC,UAAAA,GAAG,EAAE;AAAC,iBAAKA;AAAN,WADD;AAEJC,UAAAA;AAFI,YAGFJ,IAHJ;AAIA,cAAM;AACJK,UAAAA,IAAI,EAAE;AACJpB,YAAAA,GAAG,EAAEA,GAAG,CAACqB,GAAJ,CAAQC,KAAR,CAAcJ,GAAd,CADD;AAEJK,YAAAA,WAAW,EAAEJ;AAFT;AADF,SAAN;AAMD;AACF;AACF;;AACD,SAAOhB,SAAP;AACD,CA3BoB,CAArB;AA6BAX,OAAO,CAACS,YAAR,GAAuBA,YAAvB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar configure = require('../lib/configure.js');\nvar toUrlSearchParams = require('../lib/to-url-search-params.js');\nvar abortSignal = require('../lib/abort-signal.js');\nvar multipartRequest = require('ipfs-core-utils/multipart-request');\nvar nativeAbortController = require('native-abort-controller');\nvar cid = require('multiformats/cid');\n\nconst createImport = configure.configure(api => {\n  async function* dagImport(source, options = {}) {\n    const controller = new nativeAbortController.AbortController();\n    const signal = abortSignal.abortSignal(controller.signal, options.signal);\n    const {headers, body} = await multipartRequest.multipartRequest(source, controller, options.headers);\n    const res = await api.post('dag/import', {\n      signal,\n      headers,\n      body,\n      searchParams: toUrlSearchParams.toUrlSearchParams({ 'pin-roots': options.pinRoots })\n    });\n    for await (const {Root} of res.ndjson()) {\n      if (Root !== undefined) {\n        const {\n          Cid: {'/': Cid},\n          PinErrorMsg\n        } = Root;\n        yield {\n          root: {\n            cid: cid.CID.parse(Cid),\n            pinErrorMsg: PinErrorMsg\n          }\n        };\n      }\n    }\n  }\n  return dagImport;\n});\n\nexports.createImport = createImport;\n"]},"metadata":{},"sourceType":"script"}