{"ast":null,"code":"// constants\nimport Web3 from \"web3\";\nimport GoodNFT from \"/Users/intvirtue/Last-final/src/contracts/GoodNFT.json\"; // log\n\nimport { fetchData } from \"../data/dataActions\";\n\nconst connectRequest = () => {\n  return {\n    type: \"CONNECTION_REQUEST\"\n  };\n};\n\nconst connectSuccess = payload => {\n  return {\n    type: \"CONNECTION_SUCCESS\",\n    payload: payload\n  };\n};\n\nconst connectFailed = payload => {\n  return {\n    type: \"CONNECTION_FAILED\",\n    payload: payload\n  };\n};\n\nconst updateAccountRequest = payload => {\n  return {\n    type: \"UPDATE_ACCOUNT\",\n    payload: payload\n  };\n};\n\nexport const connect = () => {\n  return async dispatch => {\n    dispatch(connectRequest());\n\n    if (window.ethereum) {\n      let web3 = new Web3(window.ethereum);\n\n      try {\n        const accounts = await window.ethereum.request({\n          method: \"eth_accounts\"\n        });\n        const networkId = await window.ethereum.request({\n          method: \"net_version\"\n        });\n        const NetworkData = await GoodNFT.networks[networkId];\n\n        if (NetworkData) {\n          const GoodNFTObj = new web3.eth.Contract(GoodNFT.abi, NetworkData.address);\n          dispatch(connectSuccess({\n            account: accounts[0],\n            smartContract: GoodNFTObj,\n            web3: web3\n          })); // Add listeners start\n\n          window.ethereum.on(\"accountsChanged\", accounts => {\n            window.location.reload();\n            dispatch(updateAccount(accounts[0]));\n          });\n          window.ethereum.on(\"chainChanged\", () => {\n            window.location.reload();\n          }); // Add listeners end\n        } else {\n          dispatch(connectFailed(\"Change network to Ropsten Testnet.\"));\n        }\n      } catch (err) {\n        dispatch(connectFailed(\"Something went wrong.\"));\n      }\n    } else {\n      dispatch(connectFailed(\"Install Metamask.\"));\n    }\n  };\n};\nexport const updateAccount = account => {\n  return async dispatch => {\n    dispatch(updateAccountRequest({\n      account: account\n    }));\n    dispatch(fetchData(account));\n  };\n};","map":{"version":3,"sources":["/Users/intvirtue/Last-final/src/redux/blockchain/blockchainActions.js"],"names":["Web3","GoodNFT","fetchData","connectRequest","type","connectSuccess","payload","connectFailed","updateAccountRequest","connect","dispatch","window","ethereum","web3","accounts","request","method","networkId","NetworkData","networks","GoodNFTObj","eth","Contract","abi","address","account","smartContract","on","location","reload","updateAccount","err"],"mappings":"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","sourcesContent":["// constants\nimport Web3 from \"web3\";\nimport GoodNFT from \"/Users/intvirtue/Last-final/src/contracts/GoodNFT.json\";\n// log\nimport { fetchData } from \"../data/dataActions\";\n\nconst connectRequest = () => {\n  return {\n    type: \"CONNECTION_REQUEST\",\n  };\n};\n\nconst connectSuccess = (payload) => {\n  return {\n    type: \"CONNECTION_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst connectFailed = (payload) => {\n  return {\n    type: \"CONNECTION_FAILED\",\n    payload: payload,\n  };\n};\n\nconst updateAccountRequest = (payload) => {\n  return {\n    type: \"UPDATE_ACCOUNT\",\n    payload: payload,\n  };\n};\n\nexport const connect = () => {\n  return async (dispatch) => {\n    dispatch(connectRequest());\n    if (window.ethereum) {\n      let web3 = new Web3(window.ethereum);\n      try {\n        const accounts = await window.ethereum.request({\n          method: \"eth_accounts\",\n        });\n        const networkId = await window.ethereum.request({\n          method: \"net_version\",\n        });\n        const NetworkData = await GoodNFT.networks[networkId];\n        if (NetworkData) {\n          const GoodNFTObj = new web3.eth.Contract(\n            GoodNFT.abi,\n            NetworkData.address\n          );\n          dispatch(\n            connectSuccess({\n              account: accounts[0],\n              smartContract: GoodNFTObj,\n              web3: web3,\n            })\n          );\n          // Add listeners start\n          window.ethereum.on(\"accountsChanged\", (accounts) => {\n            window.location.reload();\n            dispatch(updateAccount(accounts[0]));\n\n          });\n          window.ethereum.on(\"chainChanged\", () => {\n            window.location.reload();\n          });\n          // Add listeners end\n        } else {\n          dispatch(connectFailed(\"Change network to Ropsten Testnet.\"));\n        }\n      } catch (err) {\n        dispatch(connectFailed(\"Something went wrong.\"));\n      }\n    } else {\n      dispatch(connectFailed(\"Install Metamask.\"));\n    }\n  };\n};\n\nexport const updateAccount = (account) => {\n  return async (dispatch) => {\n    dispatch(updateAccountRequest({ account: account }));\n    dispatch(fetchData(account));\n  };\n};\n"]},"metadata":{},"sourceType":"module"}