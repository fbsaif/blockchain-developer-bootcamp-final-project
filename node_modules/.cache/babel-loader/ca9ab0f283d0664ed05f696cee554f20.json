{"ast":null,"code":"var _jsxFileName = \"/Users/intvirtue/Last-final/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { connect } from \"./redux/blockchain/blockchainActions\";\nimport { fetchData } from \"./redux/data/dataActions\";\nimport * as s from \"./styles/globalStyles\";\nimport styled from \"styled-components\";\nimport { create } from \"ipfs-http-client\";\nimport SignatureCanvas from \"react-signature-canvas\";\nimport Navbar from './Navbar';\nimport background from \"./assests/bg/background.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ipfsClient = create(\"https://ipfs.infura.io:5001/api/v0\");\nexport const StyledButton = styled.button`\n  padding: 8px;\n`;\n_c = StyledButton;\nexport const ResponsiveWrapper = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: stretched;\n  align-items: stretched;\n  width: 100%;\n  @media (min-width: 767px) {\n    flex-direction: row;\n  }\n`;\nexport const StyledImg = styled.img`\n  width: 200px;\n  height: 200px;\n  @media (min-width: 767px) {\n    width: 350px;\n    height: 350px;\n  }\n  transition: width 0.5s;\n  transition: height 0.5s;\n`;\n\nfunction App() {\n  _s();\n\n  const dispatch = useDispatch();\n  const blockchain = useSelector(state => state.blockchain);\n  const data = useSelector(state => state.data);\n  const [loading, setLoading] = useState(false);\n  const [feedback, setFeedback] = useState(\"Sign or draw something and click on MINT\");\n  const [NFTS, setNFTS] = useState([]);\n  const elementRef = useRef();\n  const ipfsBaseUrl = \"https://ipfs.infura.io/ipfs/\";\n  const name = \"Good NFT\";\n  const description = \"A donation made by minting an NFT\";\n  console.log(NFTS);\n\n  const mint = _uri => {\n    setFeedback(\"Minting your GoodNFT...\");\n    blockchain.smartContract.methods.mint(blockchain.account, _uri).send({\n      from: blockchain.account,\n      value: 10000000000000000\n    }).once(\"error\", err => {\n      console.log(err);\n      setLoading(false);\n      setFeedback(\"Sorry, something went wrong please try again later.\");\n    }).then(receipt => {\n      console.log(receipt);\n      setLoading(false);\n      clearCanvas();\n      dispatch(fetchData(blockchain.account));\n      setFeedback(\"Successfully minting your NFT, Thank you for your donation\");\n    });\n  };\n\n  const createMetaDataAndMint = async (_name, _des, _imgBuffer) => {\n    setLoading(true);\n    setFeedback(\"Minting Your NFT\");\n\n    try {\n      const addedImage = await ipfsClient.add(_imgBuffer);\n      const metaDataObj = {\n        name: _name,\n        description: _des,\n        image: ipfsBaseUrl + addedImage.path\n      };\n      const addedMetaData = await ipfsClient.add(JSON.stringify(metaDataObj));\n      console.log(ipfsBaseUrl + addedMetaData.path);\n      mint(ipfsBaseUrl + addedMetaData.path);\n    } catch (err) {\n      console.log(err);\n      setLoading(false);\n      setFeedback(\"Error\");\n    }\n  };\n\n  const startMintingProcess = () => {\n    createMetaDataAndMint(name, description, getImageData());\n  };\n\n  const getImageData = () => {\n    const canvasEl = elementRef.current;\n    let dataUrl = canvasEl.toDataURL(\"image/png\");\n    const buffer = Buffer(dataUrl.split(\",\")[1], \"base64\");\n    return buffer;\n  };\n\n  const fetchMetatDataForNFTS = () => {\n    setNFTS([]);\n    data.allTokens.forEach(nft => {\n      fetch(nft.uri).then(response => response.json()).then(metaData => {\n        setNFTS(prevState => [...prevState, {\n          id: nft.id,\n          metaData: metaData\n        }]);\n      }).catch(err => {\n        console.log(err);\n      });\n    });\n  };\n\n  const clearCanvas = () => {\n    const canvasEl = elementRef.current;\n    canvasEl.clear();\n  };\n\n  useEffect(() => {\n    if (blockchain.account !== \"\" && blockchain.smartContract !== null) {\n      dispatch(fetchData(blockchain.account));\n    }\n  }, [blockchain.smartContract, dispatch]);\n  useEffect(() => {\n    fetchMetatDataForNFTS();\n  }, [data.allTokens]);\n  return /*#__PURE__*/_jsxDEV(s.Screen, {\n    image: background,\n    style: {\n      backgroundColor: \"var(--yellow)\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(s.Container, {\n      flex: 1,\n      ai: \"center\",\n      style: {\n        padding: 24\n      },\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(s.SpacerMedium, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(s.TextTitle, {\n        children: [\"Account:\", blockchain.account]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 8\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(s.Container, {\n      flex: 1,\n      ai: \"center\",\n      style: {\n        padding: 24\n      },\n      children: [/*#__PURE__*/_jsxDEV(s.TextTitle, {\n        style: {\n          textAlign: \"center\",\n          fontSize: 28,\n          fontWeight: \"bold\"\n        },\n        children: \"Mint your GoodNFT...and make a donation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(s.SpacerMedium, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(s.TextTitle, {\n        style: {\n          textAlign: \"center\",\n          fontSize: 28,\n          fontWeight: \"bold\"\n        },\n        children: \"We appreciate that you thought of us!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(s.SpacerMedium, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(s.TextTitle, {\n        style: {\n          textAlign: \"center\",\n          fontSize: 35,\n          fontWeight: \"bold\"\n        },\n        children: [\"NFTs Minted: \", data.totalSupply, \" out of 20\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(s.SpacerMedium, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(s.Container, {\n        flex: 1,\n        jc: \"center\",\n        ai: \"center\",\n        style: {\n          backgroundColor: \"#383838\",\n          padding: 24\n        },\n        children: Number(data.totalSupply) == 20 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(s.TextTitle, {\n            style: {\n              textAlign: \"center\"\n            },\n            children: \"The donation has ended.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 17\n          }, this)\n        }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(s.TextTitle, {\n            style: {\n              textAlign: \"center\"\n            },\n            children: \"Donation costs 0.5 per NFT\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(s.SpacerXSmall, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(s.SpacerXSmall, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(s.TextDescription, {\n            style: {\n              textAlign: \"center\",\n              fontSize: 22\n            },\n            children: feedback\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(s.SpacerSmall, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(s.SpacerMedium, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 17\n          }, this), blockchain.account === \"\" || blockchain.smartContract === null ? /*#__PURE__*/_jsxDEV(s.Container, {\n            ai: \"center\",\n            jc: \"center\",\n            children: [/*#__PURE__*/_jsxDEV(s.TextDescription, {\n              style: {\n                textAlign: \"center\"\n              },\n              children: \"Connect Your Wallet\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(s.SpacerSmall, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(StyledButton, {\n              onClick: e => {\n                e.preventDefault();\n                dispatch(connect());\n              },\n              children: \"CONNECT\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 21\n            }, this), blockchain.errorMsg !== \"\" ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(s.SpacerSmall, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 214,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(s.TextDescription, {\n                style: {\n                  textAlign: \"center\"\n                },\n                children: blockchain.errorMsg\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 215,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true) : null]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 19\n          }, this) : /*#__PURE__*/_jsxDEV(s.Container, {\n            flex: 1,\n            ai: \"center\",\n            style: {\n              padding: 24\n            },\n            children: [/*#__PURE__*/_jsxDEV(s.Container, {\n              ai: \"center\",\n              jc: \"center\",\n              fd: \"row\",\n              children: [/*#__PURE__*/_jsxDEV(StyledButton, {\n                disabled: loading ? 1 : 0,\n                onClick: e => {\n                  e.preventDefault();\n                  startMintingProcess();\n                },\n                children: \"MINT\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 225,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(s.SpacerSmall, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 234,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(StyledButton, {\n                disabled: loading ? 1 : 0,\n                onClick: e => {\n                  e.preventDefault();\n                  clearCanvas();\n                },\n                children: \"CLEAR\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 235,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(s.SpacerLarge, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 244,\n                columnNumber: 13\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(s.SpacerLarge, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(SignatureCanvas, {\n              backgroundColor: \"#4f8edb\",\n              canvasProps: {\n                width: 350,\n                height: 350\n              },\n              ref: elementRef\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 247,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(s.SpacerLarge, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(s.Container, {\n              flex: 1,\n              jc: \"center\",\n              ai: \"center\",\n              style: {\n                width: \"70%\"\n              },\n              fd: \"row\",\n              style: {\n                flexWrap: \"wrap\"\n              },\n              children: data.loading ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(s.SpacerSmall, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 256,\n                  columnNumber: 15\n                }, this), /*#__PURE__*/_jsxDEV(s.TextDescription, {\n                  style: {\n                    textAlign: \"center\"\n                  },\n                  children: \"loading...\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 257,\n                  columnNumber: 15\n                }, this)]\n              }, void 0, true) : NFTS.map((nft, index) => {\n                return /*#__PURE__*/_jsxDEV(s.Container, {\n                  style: {\n                    padding: 16\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(s.TextTitle, {\n                    children: nft.metaData.name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 265,\n                    columnNumber: 19\n                  }, this), /*#__PURE__*/_jsxDEV(s.SpacerSmall, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 266,\n                    columnNumber: 19\n                  }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                    alt: nft.metaData.name,\n                    src: nft.metaData.image,\n                    width: 150\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 267,\n                    columnNumber: 19\n                  }, this)]\n                }, index, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 264,\n                  columnNumber: 17\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 253,\n              columnNumber: 11\n            }, this), \".\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(s.SpacerSmall, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(s.Container, {\n        jc: \"center\",\n        ai: \"center\",\n        style: {\n          width: \"70%\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(s.TextDescription, {\n          style: {\n            textAlign: \"center\",\n            fontSize: 15\n          },\n          children: \"This project is built for the consensys bootcamp final project, and\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(s.SpacerSmall, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(s.TextDescription, {\n          style: {\n            textAlign: \"center\",\n            fontSize: 15\n          },\n          children: \"It is an experiment to make a donation through minting your drawing or signiture as an NFT and upload it to IPFS\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"m+7G6h5oIzoFtpvFITO7Y1xDrHM=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"StyledButton\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/Users/intvirtue/Last-final/src/App.js"],"names":["React","useEffect","useState","useRef","useDispatch","useSelector","connect","fetchData","s","styled","create","SignatureCanvas","Navbar","background","ipfsClient","StyledButton","button","ResponsiveWrapper","div","StyledImg","img","App","dispatch","blockchain","state","data","loading","setLoading","feedback","setFeedback","NFTS","setNFTS","elementRef","ipfsBaseUrl","name","description","console","log","mint","_uri","smartContract","methods","account","send","from","value","once","err","then","receipt","clearCanvas","createMetaDataAndMint","_name","_des","_imgBuffer","addedImage","add","metaDataObj","image","path","addedMetaData","JSON","stringify","startMintingProcess","getImageData","canvasEl","current","dataUrl","toDataURL","buffer","Buffer","split","fetchMetatDataForNFTS","allTokens","forEach","nft","fetch","uri","response","json","metaData","prevState","id","catch","clear","backgroundColor","padding","textAlign","fontSize","fontWeight","totalSupply","Number","e","preventDefault","errorMsg","width","height","flexWrap","map","index"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { connect } from \"./redux/blockchain/blockchainActions\";\nimport { fetchData } from \"./redux/data/dataActions\";\nimport * as s from \"./styles/globalStyles\";\nimport styled from \"styled-components\";\nimport { create } from \"ipfs-http-client\";\nimport SignatureCanvas from \"react-signature-canvas\";\nimport Navbar from './Navbar'\nimport background from \"./assests/bg/background.png\";\n\n\n\nconst ipfsClient = create(\"https://ipfs.infura.io:5001/api/v0\");\n\nexport const StyledButton = styled.button`\n  padding: 8px;\n`;\nexport const ResponsiveWrapper = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: stretched;\n  align-items: stretched;\n  width: 100%;\n  @media (min-width: 767px) {\n    flex-direction: row;\n  }\n`;\nexport const StyledImg = styled.img`\n  width: 200px;\n  height: 200px;\n  @media (min-width: 767px) {\n    width: 350px;\n    height: 350px;\n  }\n  transition: width 0.5s;\n  transition: height 0.5s;\n`;\n\nfunction App() {\n  const dispatch = useDispatch();\n  const blockchain = useSelector((state) => state.blockchain);\n  const data = useSelector((state) => state.data);\n  const [loading, setLoading] = useState(false);\n  const [feedback, setFeedback] = useState(\"Sign or draw something and click on MINT\");\n  const [NFTS, setNFTS] = useState([]);\n  const elementRef = useRef();\n  \n  \n  const ipfsBaseUrl = \"https://ipfs.infura.io/ipfs/\";\n  const name = \"Good NFT\";\n  const description = \"A donation made by minting an NFT\";\n  \n  console.log(NFTS);\n\n  const mint = (_uri) => {\n    setFeedback(\"Minting your GoodNFT...\");\n    blockchain.smartContract.methods\n      .mint(blockchain.account, _uri)\n      .send({ from: blockchain.account, value: 10000000000000000})\n      .once(\"error\", (err) => {\n        console.log(err);\n        setLoading(false);\n        setFeedback(\"Sorry, something went wrong please try again later.\");\n      })\n      .then((receipt) => {\n        console.log(receipt);\n        setLoading(false);\n        clearCanvas();\n        dispatch(fetchData(blockchain.account));\n        setFeedback(\"Successfully minting your NFT, Thank you for your donation\");\n      });\n  };\n\n  const createMetaDataAndMint = async (_name, _des, _imgBuffer) => {\n    setLoading(true);\n    setFeedback(\"Minting Your NFT\");\n    try {\n      const addedImage = await ipfsClient.add(_imgBuffer);\n      const metaDataObj = {\n        name: _name,\n        description: _des,\n        image: ipfsBaseUrl + addedImage.path,\n      };\n      const addedMetaData = await ipfsClient.add(JSON.stringify(metaDataObj));\n      console.log(ipfsBaseUrl + addedMetaData.path);\n      mint(ipfsBaseUrl + addedMetaData.path);\n    } catch (err) {\n      console.log(err);\n      setLoading(false);\n      setFeedback(\"Error\");\n    }\n  };\n\n  const startMintingProcess = () => {\n    createMetaDataAndMint(name, description, getImageData());\n  };\n\n  const getImageData = () => {\n    const canvasEl = elementRef.current;\n    let dataUrl = canvasEl.toDataURL(\"image/png\");\n    const buffer = Buffer(dataUrl.split(\",\")[1], \"base64\");\n    return buffer;\n  };\n\n  const fetchMetatDataForNFTS = () => {\n    setNFTS([]);\n    data.allTokens.forEach((nft) => {\n      fetch(nft.uri)\n        .then((response) => response.json())\n        .then((metaData) => {\n          setNFTS((prevState) => [\n            ...prevState,\n            { id: nft.id, metaData: metaData },\n          ]);\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    });\n  };\n\n  const clearCanvas = () => {\n    const canvasEl = elementRef.current;\n    canvasEl.clear();\n  };\n\n  useEffect(() => {\n    if (blockchain.account !== \"\" && blockchain.smartContract !== null) {\n      dispatch(fetchData(blockchain.account));\n    }\n  }, [blockchain.smartContract, dispatch]);\n\n  useEffect(() => {\n    fetchMetatDataForNFTS();\n  }, [data.allTokens]);\n\n  return (\n    <s.Screen image={background} style={{ backgroundColor: \"var(--yellow)\" }}>\n      <s.Container flex={1} ai={\"center\"} style={{ padding: 24 }} >\n       <Navbar />\n       <s.SpacerMedium />\n       <s.TextTitle\n          \n        >\n          Account:{blockchain.account}\n          \n        </s.TextTitle>\n      </s.Container>\n      <s.Container flex={1} ai={\"center\"} style={{ padding: 24 }}>\n        <s.TextTitle\n          style={{ textAlign: \"center\", fontSize: 28, fontWeight: \"bold\" }}\n        >\n          Mint your GoodNFT...and make a donation\n        </s.TextTitle>\n        <s.SpacerMedium />\n        <s.TextTitle\n          style={{ textAlign: \"center\", fontSize: 28, fontWeight: \"bold\" }}\n        >\n          We appreciate that you thought of us!\n        </s.TextTitle>\n        <s.SpacerMedium />\n           \n            <s.TextTitle \n              style={{ textAlign: \"center\", fontSize: 35, fontWeight: \"bold\" }}\n            >\n              NFTs Minted: {data.totalSupply} out of 20\n            </s.TextTitle>\n          \n          <s.SpacerMedium />\n          <s.Container\n            flex={1}\n            jc={\"center\"}\n            ai={\"center\"}\n            style={{ backgroundColor: \"#383838\", padding: 24 }}\n          >\n            {Number(data.totalSupply) == 20 ? (\n              <>\n                <s.TextTitle style={{ textAlign: \"center\" }}>\n                  The donation has ended.\n                </s.TextTitle>\n              </>\n            ) : (\n              <>\n                <s.TextTitle style={{ textAlign: \"center\" }}>\n                  Donation costs 0.5 per NFT\n                </s.TextTitle>\n                <s.SpacerXSmall />\n                \n                <s.SpacerXSmall />\n                <s.TextDescription style={{ textAlign: \"center\", fontSize: 22}}>\n                  {feedback}\n                </s.TextDescription>\n                <s.SpacerSmall />\n                <s.SpacerMedium />\n                {blockchain.account === \"\" ||\n                blockchain.smartContract === null ? (\n                  <s.Container ai={\"center\"} jc={\"center\"}>\n                    <s.TextDescription style={{ textAlign: \"center\" }}>\n                      Connect Your Wallet\n                    </s.TextDescription>\n                    <s.SpacerSmall />\n                    <StyledButton\n                      onClick={(e) => {\n                        e.preventDefault();\n                        dispatch(connect());\n                      }}\n                    >\n                      CONNECT\n                    </StyledButton>\n                    {blockchain.errorMsg !== \"\" ? (\n                      <>\n                        <s.SpacerSmall />\n                        <s.TextDescription style={{ textAlign: \"center\" }}>\n                          {blockchain.errorMsg}\n                        </s.TextDescription>\n                      </>\n                    ) : null}\n                  </s.Container>\n                ) : (\n                  <s.Container flex={1} ai={\"center\"} style={{ padding: 24 }}>\n                    \n                    <s.Container ai={\"center\"} jc={\"center\"} fd={\"row\"}>\n                    <StyledButton\n                      disabled={loading ? 1 : 0}\n                      onClick={(e) => {\n                        e.preventDefault();\n                        startMintingProcess();\n                      }}\n                    >\n            MINT\n            </StyledButton>\n            <s.SpacerSmall />\n            <StyledButton\n              disabled={loading ? 1 : 0}\n              onClick={(e) => {\n                e.preventDefault();\n                clearCanvas();\n              }}\n            >\n              CLEAR\n            </StyledButton>\n            <s.SpacerLarge />\n            </s.Container>\n            <s.SpacerLarge />\n          <SignatureCanvas\n            backgroundColor={\"#4f8edb\"}\n            canvasProps={{ width: 350, height: 350 }}\n            ref={elementRef}\n          />\n          <s.SpacerLarge />\n          <s.Container flex={1} jc={\"center\"} ai={\"center\"} style={{ width: \"70%\" }} fd={\"row\"} style={{ flexWrap: \"wrap\" }}>\n        {data.loading ? (\n            <>\n              <s.SpacerSmall />\n              <s.TextDescription style={{ textAlign: \"center\" }}>\n                loading...\n              </s.TextDescription>\n            </>\n          ) : (\n            NFTS.map((nft, index) => {\n              return (\n                <s.Container key={index} style={{ padding: 16 }}>\n                  <s.TextTitle >{nft.metaData.name}</s.TextTitle>\n                  <s.SpacerSmall />\n                  <img\n                    alt={nft.metaData.name}\n                    src={nft.metaData.image}\n                    width={150}\n                  />\n                </s.Container>\n              );\n            })\n          )}\n        </s.Container>.\n      </s.Container>\n          \n                )}\n              </>\n            )}\n      </s.Container>          \n        <s.SpacerSmall />\n        <s.Container jc={\"center\"} ai={\"center\"} style={{ width: \"70%\" }}>\n          <s.TextDescription style={{ textAlign: \"center\", fontSize: 15}}>\n            This project is built for the consensys bootcamp final project, and \n          </s.TextDescription>\n          <s.SpacerSmall />\n          <s.TextDescription style={{ textAlign: \"center\", fontSize: 15 }}>\n            It is an experiment to make a donation through minting your drawing or signiture as an NFT and upload it to IPFS\n          </s.TextDescription>\n        </s.Container>\n      </s.Container>\n    </s.Screen>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}