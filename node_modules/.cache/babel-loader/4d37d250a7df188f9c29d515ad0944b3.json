{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar baseX$1 = require('../../vendor/base-x.js');\n\nvar bytes = require('../bytes.js');\n\nclass Encoder {\n  constructor(name, prefix, baseEncode) {\n    this.name = name;\n    this.prefix = prefix;\n    this.baseEncode = baseEncode;\n  }\n\n  encode(bytes) {\n    if (bytes instanceof Uint8Array) {\n      return `${this.prefix}${this.baseEncode(bytes)}`;\n    } else {\n      throw Error('Unknown type, must be binary type');\n    }\n  }\n\n}\n\nclass Decoder {\n  constructor(name, prefix, baseDecode) {\n    this.name = name;\n    this.prefix = prefix;\n    this.baseDecode = baseDecode;\n  }\n\n  decode(text) {\n    if (typeof text === 'string') {\n      switch (text[0]) {\n        case this.prefix:\n          {\n            return this.baseDecode(text.slice(1));\n          }\n\n        default:\n          {\n            throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);\n          }\n      }\n    } else {\n      throw Error('Can only multibase decode strings');\n    }\n  }\n\n  or(decoder) {\n    const decoders = {\n      [this.prefix]: this,\n      ...(decoder.decoders || {\n        [decoder.prefix]: decoder\n      })\n    };\n    return new ComposedDecoder(decoders);\n  }\n\n}\n\nclass ComposedDecoder {\n  constructor(decoders) {\n    this.decoders = decoders;\n  }\n\n  or(decoder) {\n    const other = decoder.decoders || {\n      [decoder.prefix]: decoder\n    };\n    return new ComposedDecoder({ ...this.decoders,\n      ...other\n    });\n  }\n\n  decode(input) {\n    const prefix = input[0];\n    const decoder = this.decoders[prefix];\n\n    if (decoder) {\n      return decoder.decode(input);\n    } else {\n      throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);\n    }\n  }\n\n}\n\nclass Codec {\n  constructor(name, prefix, baseEncode, baseDecode) {\n    this.name = name;\n    this.prefix = prefix;\n    this.baseEncode = baseEncode;\n    this.baseDecode = baseDecode;\n    this.encoder = new Encoder(name, prefix, baseEncode);\n    this.decoder = new Decoder(name, prefix, baseDecode);\n  }\n\n  encode(input) {\n    return this.encoder.encode(input);\n  }\n\n  decode(input) {\n    return this.decoder.decode(input);\n  }\n\n}\n\nconst from = _ref => {\n  let {\n    name,\n    prefix,\n    encode,\n    decode\n  } = _ref;\n  return new Codec(name, prefix, encode, decode);\n};\n\nconst baseX = _ref2 => {\n  let {\n    prefix,\n    name,\n    alphabet\n  } = _ref2;\n  const {\n    encode,\n    decode\n  } = baseX$1(alphabet, name);\n  return from({\n    prefix,\n    name,\n    encode,\n    decode: text => bytes.coerce(decode(text))\n  });\n};\n\nconst decode = (string, alphabet, bitsPerChar, name) => {\n  const codes = {};\n\n  for (let i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i;\n  }\n\n  let end = string.length;\n\n  while (string[end - 1] === '=') {\n    --end;\n  }\n\n  const out = new Uint8Array(end * bitsPerChar / 8 | 0);\n  let bits = 0;\n  let buffer = 0;\n  let written = 0;\n\n  for (let i = 0; i < end; ++i) {\n    const value = codes[string[i]];\n\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${name} character`);\n    }\n\n    buffer = buffer << bitsPerChar | value;\n    bits += bitsPerChar;\n\n    if (bits >= 8) {\n      bits -= 8;\n      out[written++] = 255 & buffer >> bits;\n    }\n  }\n\n  if (bits >= bitsPerChar || 255 & buffer << 8 - bits) {\n    throw new SyntaxError('Unexpected end of data');\n  }\n\n  return out;\n};\n\nconst encode = (data, alphabet, bitsPerChar) => {\n  const pad = alphabet[alphabet.length - 1] === '=';\n  const mask = (1 << bitsPerChar) - 1;\n  let out = '';\n  let bits = 0;\n  let buffer = 0;\n\n  for (let i = 0; i < data.length; ++i) {\n    buffer = buffer << 8 | data[i];\n    bits += 8;\n\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar;\n      out += alphabet[mask & buffer >> bits];\n    }\n  }\n\n  if (bits) {\n    out += alphabet[mask & buffer << bitsPerChar - bits];\n  }\n\n  if (pad) {\n    while (out.length * bitsPerChar & 7) {\n      out += '=';\n    }\n  }\n\n  return out;\n};\n\nconst rfc4648 = _ref3 => {\n  let {\n    name,\n    prefix,\n    bitsPerChar,\n    alphabet\n  } = _ref3;\n  return from({\n    prefix,\n    name,\n\n    encode(input) {\n      return encode(input, alphabet, bitsPerChar);\n    },\n\n    decode(input) {\n      return decode(input, alphabet, bitsPerChar, name);\n    }\n\n  });\n};\n\nexports.Codec = Codec;\nexports.baseX = baseX;\nexports.from = from;\nexports.rfc4648 = rfc4648;","map":{"version":3,"sources":["/Users/intvirtue/Last-final/node_modules/multiformats/cjs/src/bases/base.js"],"names":["Object","defineProperty","exports","value","baseX$1","require","bytes","Encoder","constructor","name","prefix","baseEncode","encode","Uint8Array","Error","Decoder","baseDecode","decode","text","slice","JSON","stringify","or","decoder","decoders","ComposedDecoder","other","input","RangeError","keys","Codec","encoder","from","baseX","alphabet","coerce","string","bitsPerChar","codes","i","length","end","out","bits","buffer","written","undefined","SyntaxError","data","pad","mask","rfc4648"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar baseX$1 = require('../../vendor/base-x.js');\nvar bytes = require('../bytes.js');\n\nclass Encoder {\n  constructor(name, prefix, baseEncode) {\n    this.name = name;\n    this.prefix = prefix;\n    this.baseEncode = baseEncode;\n  }\n  encode(bytes) {\n    if (bytes instanceof Uint8Array) {\n      return `${ this.prefix }${ this.baseEncode(bytes) }`;\n    } else {\n      throw Error('Unknown type, must be binary type');\n    }\n  }\n}\nclass Decoder {\n  constructor(name, prefix, baseDecode) {\n    this.name = name;\n    this.prefix = prefix;\n    this.baseDecode = baseDecode;\n  }\n  decode(text) {\n    if (typeof text === 'string') {\n      switch (text[0]) {\n      case this.prefix: {\n          return this.baseDecode(text.slice(1));\n        }\n      default: {\n          throw Error(`Unable to decode multibase string ${ JSON.stringify(text) }, ${ this.name } decoder only supports inputs prefixed with ${ this.prefix }`);\n        }\n      }\n    } else {\n      throw Error('Can only multibase decode strings');\n    }\n  }\n  or(decoder) {\n    const decoders = {\n      [this.prefix]: this,\n      ...decoder.decoders || { [decoder.prefix]: decoder }\n    };\n    return new ComposedDecoder(decoders);\n  }\n}\nclass ComposedDecoder {\n  constructor(decoders) {\n    this.decoders = decoders;\n  }\n  or(decoder) {\n    const other = decoder.decoders || { [decoder.prefix]: decoder };\n    return new ComposedDecoder({\n      ...this.decoders,\n      ...other\n    });\n  }\n  decode(input) {\n    const prefix = input[0];\n    const decoder = this.decoders[prefix];\n    if (decoder) {\n      return decoder.decode(input);\n    } else {\n      throw RangeError(`Unable to decode multibase string ${ JSON.stringify(input) }, only inputs prefixed with ${ Object.keys(this.decoders) } are supported`);\n    }\n  }\n}\nclass Codec {\n  constructor(name, prefix, baseEncode, baseDecode) {\n    this.name = name;\n    this.prefix = prefix;\n    this.baseEncode = baseEncode;\n    this.baseDecode = baseDecode;\n    this.encoder = new Encoder(name, prefix, baseEncode);\n    this.decoder = new Decoder(name, prefix, baseDecode);\n  }\n  encode(input) {\n    return this.encoder.encode(input);\n  }\n  decode(input) {\n    return this.decoder.decode(input);\n  }\n}\nconst from = ({name, prefix, encode, decode}) => new Codec(name, prefix, encode, decode);\nconst baseX = ({prefix, name, alphabet}) => {\n  const {encode, decode} = baseX$1(alphabet, name);\n  return from({\n    prefix,\n    name,\n    encode,\n    decode: text => bytes.coerce(decode(text))\n  });\n};\nconst decode = (string, alphabet, bitsPerChar, name) => {\n  const codes = {};\n  for (let i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i;\n  }\n  let end = string.length;\n  while (string[end - 1] === '=') {\n    --end;\n  }\n  const out = new Uint8Array(end * bitsPerChar / 8 | 0);\n  let bits = 0;\n  let buffer = 0;\n  let written = 0;\n  for (let i = 0; i < end; ++i) {\n    const value = codes[string[i]];\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${ name } character`);\n    }\n    buffer = buffer << bitsPerChar | value;\n    bits += bitsPerChar;\n    if (bits >= 8) {\n      bits -= 8;\n      out[written++] = 255 & buffer >> bits;\n    }\n  }\n  if (bits >= bitsPerChar || 255 & buffer << 8 - bits) {\n    throw new SyntaxError('Unexpected end of data');\n  }\n  return out;\n};\nconst encode = (data, alphabet, bitsPerChar) => {\n  const pad = alphabet[alphabet.length - 1] === '=';\n  const mask = (1 << bitsPerChar) - 1;\n  let out = '';\n  let bits = 0;\n  let buffer = 0;\n  for (let i = 0; i < data.length; ++i) {\n    buffer = buffer << 8 | data[i];\n    bits += 8;\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar;\n      out += alphabet[mask & buffer >> bits];\n    }\n  }\n  if (bits) {\n    out += alphabet[mask & buffer << bitsPerChar - bits];\n  }\n  if (pad) {\n    while (out.length * bitsPerChar & 7) {\n      out += '=';\n    }\n  }\n  return out;\n};\nconst rfc4648 = ({name, prefix, bitsPerChar, alphabet}) => {\n  return from({\n    prefix,\n    name,\n    encode(input) {\n      return encode(input, alphabet, bitsPerChar);\n    },\n    decode(input) {\n      return decode(input, alphabet, bitsPerChar, name);\n    }\n  });\n};\n\nexports.Codec = Codec;\nexports.baseX = baseX;\nexports.from = from;\nexports.rfc4648 = rfc4648;\n"]},"metadata":{},"sourceType":"script"}