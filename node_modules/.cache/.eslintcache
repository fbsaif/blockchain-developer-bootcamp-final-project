[{"/Users/intvirtue/Last-final/src/index.js":"1","/Users/intvirtue/Last-final/src/reportWebVitals.js":"2","/Users/intvirtue/Last-final/src/App.js":"3","/Users/intvirtue/Last-final/src/Navbar.js":"4","/Users/intvirtue/Last-final/src/redux/data/dataActions.js":"5","/Users/intvirtue/Last-final/src/redux/blockchain/blockchainActions.js":"6","/Users/intvirtue/Last-final/src/redux/store.js":"7","/Users/intvirtue/Last-final/src/redux/blockchain/blockchainReducer.js":"8","/Users/intvirtue/Last-final/src/redux/data/dataReducer.js":"9","/Users/intvirtue/Last-final/src/styles/globalStyles.js":"10"},{"size":609,"mtime":1637056725943,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1637052006237,"results":"13","hashOfConfig":"12"},{"size":9548,"mtime":1637057733509,"results":"14","hashOfConfig":"12"},{"size":862,"mtime":1636994861597,"results":"15","hashOfConfig":"12"},{"size":1090,"mtime":1636568811437,"results":"16","hashOfConfig":"12"},{"size":2146,"mtime":1637054641923,"results":"17","hashOfConfig":"12"},{"size":559,"mtime":1636567091398,"results":"18","hashOfConfig":"12"},{"size":853,"mtime":1636976832363,"results":"19","hashOfConfig":"12"},{"size":768,"mtime":1636568704228,"results":"20","hashOfConfig":"12"},{"size":1984,"mtime":1636980015835,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"15n9yyq",{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"/Users/intvirtue/Last-final/src/index.js",[],"/Users/intvirtue/Last-final/src/reportWebVitals.js",[],["45","46"],"/Users/intvirtue/Last-final/src/App.js",["47","48","49","50"],"import React, { useEffect, useState, useRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { connect } from \"./redux/blockchain/blockchainActions\";\nimport { fetchData } from \"./redux/data/dataActions\";\nimport * as s from \"./styles/globalStyles\";\nimport styled from \"styled-components\";\nimport { create } from \"ipfs-http-client\";\nimport SignatureCanvas from \"react-signature-canvas\";\nimport Navbar from './Navbar'\nimport background from \"./assests/bg/background.png\";\n\n\n\nconst ipfsClient = create(\"https://ipfs.infura.io:5001/api/v0\");\n\nexport const StyledButton = styled.button`\n  padding: 8px;\n`;\nexport const ResponsiveWrapper = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: stretched;\n  align-items: stretched;\n  width: 100%;\n  @media (min-width: 767px) {\n    flex-direction: row;\n  }\n`;\nexport const StyledImg = styled.img`\n  width: 200px;\n  height: 200px;\n  @media (min-width: 767px) {\n    width: 350px;\n    height: 350px;\n  }\n  transition: width 0.5s;\n  transition: height 0.5s;\n`;\n\nfunction App() {\n  const dispatch = useDispatch();\n  const blockchain = useSelector((state) => state.blockchain);\n  const data = useSelector((state) => state.data);\n  const [loading, setLoading] = useState(false);\n  const [feedback, setFeedback] = useState(\"Sign or draw something and click on MINT\");\n  const [NFTS, setNFTS] = useState([]);\n  const elementRef = useRef();\n  \n  \n  const ipfsBaseUrl = \"https://ipfs.infura.io/ipfs/\";\n  const name = \"Good NFT\";\n  const description = \"A donation made by minting an NFT\";\n  \n  console.log(NFTS);\n\n  const mint = (_uri) => {\n    setFeedback(\"Minting your GoodNFT...\");\n    blockchain.smartContract.methods\n      .mint(blockchain.account, _uri)\n      .send({ from: blockchain.account, value: 10000000000000000})\n      .once(\"error\", (err) => {\n        console.log(err);\n        setLoading(false);\n        setFeedback(\"Sorry, something went wrong please try again later.\");\n      })\n      .then((receipt) => {\n        console.log(receipt);\n        setLoading(false);\n        clearCanvas();\n        dispatch(fetchData(blockchain.account));\n        setFeedback(\"Successfully minting your NFT, Thank you for your donation\");\n      });\n  };\n\n  const createMetaDataAndMint = async (_name, _des, _imgBuffer) => {\n    setLoading(true);\n    setFeedback(\"Minting Your NFT\");\n    try {\n      const addedImage = await ipfsClient.add(_imgBuffer);\n      const metaDataObj = {\n        name: _name,\n        description: _des,\n        image: ipfsBaseUrl + addedImage.path,\n      };\n      const addedMetaData = await ipfsClient.add(JSON.stringify(metaDataObj));\n      console.log(ipfsBaseUrl + addedMetaData.path);\n      mint(ipfsBaseUrl + addedMetaData.path);\n    } catch (err) {\n      console.log(err);\n      setLoading(false);\n      setFeedback(\"Error\");\n    }\n  };\n\n  const startMintingProcess = () => {\n    createMetaDataAndMint(name, description, getImageData());\n  };\n\n  const getImageData = () => {\n    const canvasEl = elementRef.current;\n    let dataUrl = canvasEl.toDataURL(\"image/png\");\n    const buffer = Buffer(dataUrl.split(\",\")[1], \"base64\");\n    return buffer;\n  };\n\n  const fetchMetatDataForNFTS = () => {\n    setNFTS([]);\n    data.allTokens.forEach((nft) => {\n      fetch(nft.uri)\n        .then((response) => response.json())\n        .then((metaData) => {\n          setNFTS((prevState) => [\n            ...prevState,\n            { id: nft.id, metaData: metaData },\n          ]);\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    });\n  };\n\n  const clearCanvas = () => {\n    const canvasEl = elementRef.current;\n    canvasEl.clear();\n  };\n\n  useEffect(() => {\n    if (blockchain.account !== \"\" && blockchain.smartContract !== null) {\n      dispatch(fetchData(blockchain.account));\n    }\n  }, [blockchain.smartContract, dispatch]);\n\n  useEffect(() => {\n    fetchMetatDataForNFTS();\n  }, [data.allTokens]);\n\n  return (\n    <s.Screen image={background} style={{ backgroundColor: \"var(--yellow)\" }}>\n      <s.Container flex={1} ai={\"center\"} style={{ padding: 24 }} >\n       <Navbar />\n       <s.SpacerMedium />\n       <s.TextTitle\n          \n        >\n          Account:{blockchain.account}\n          \n        </s.TextTitle>\n      </s.Container>\n      <s.Container flex={1} ai={\"center\"} style={{ padding: 24 }}>\n        <s.TextTitle\n          style={{ textAlign: \"center\", fontSize: 28, fontWeight: \"bold\" }}\n        >\n          Mint your GoodNFT...and make a donation\n        </s.TextTitle>\n        <s.SpacerMedium />\n        <s.TextTitle\n          style={{ textAlign: \"center\", fontSize: 28, fontWeight: \"bold\" }}\n        >\n          We appreciate that you thought of us!\n        </s.TextTitle>\n        <s.SpacerMedium />\n           \n            <s.TextTitle \n              style={{ textAlign: \"center\", fontSize: 35, fontWeight: \"bold\" }}\n            >\n              NFTs Minted: {data.totalSupply} out of 50\n            </s.TextTitle>\n          \n          <s.SpacerMedium />\n          <s.Container\n            flex={1}\n            jc={\"center\"}\n            ai={\"center\"}\n            style={{ backgroundColor: \"#383838\", padding: 24 }}\n          >\n            {Number(data.totalSupply) == 50 ? (\n              <>\n                <s.TextTitle style={{ textAlign: \"center\" }}>\n                  The donation has ended.\n                </s.TextTitle>\n              </>\n            ) : (\n              <>\n                <s.TextTitle style={{ textAlign: \"center\" }}>\n                  Donation costs 0.01 ETH per NFT\n                </s.TextTitle>\n                <s.SpacerXSmall />\n                \n                <s.SpacerXSmall />\n                <s.TextDescription style={{ textAlign: \"center\", fontSize: 22}}>\n                  {feedback}\n                </s.TextDescription>\n                <s.SpacerSmall />\n                <s.SpacerMedium />\n                {blockchain.account === \"\" ||\n                blockchain.smartContract === null ? (\n                  <s.Container ai={\"center\"} jc={\"center\"}>\n                    <s.TextDescription style={{ textAlign: \"center\" }}>\n                      Connect Your Wallet \n                    </s.TextDescription>\n                    <s.SpacerSmall />\n                    <StyledButton\n                      onClick={(e) => {\n                        e.preventDefault();\n                        dispatch(connect());\n                      }}\n                    >\n                      CONNECT\n                    </StyledButton>\n                    {blockchain.errorMsg !== \"\" ? (\n                      <>\n                        <s.SpacerSmall />\n                        <s.TextDescription style={{ textAlign: \"center\" }}>\n                          {blockchain.errorMsg}\n                        </s.TextDescription>\n                      </>\n                    ) : null}\n                  </s.Container>\n                ) : (\n                  <s.Container flex={1} ai={\"center\"} style={{ padding: 24 }}>\n                    \n                    <s.Container ai={\"center\"} jc={\"center\"} fd={\"row\"}>\n                    <StyledButton\n                      disabled={loading ? 1 : 0}\n                      onClick={(e) => {\n                        e.preventDefault();\n                        startMintingProcess();\n                      }}\n                    >\n            MINT\n            </StyledButton>\n            <s.SpacerSmall />\n            <StyledButton\n              disabled={loading ? 1 : 0}\n              onClick={(e) => {\n                e.preventDefault();\n                clearCanvas();\n              }}\n            >\n              CLEAR\n            </StyledButton>\n            <s.SpacerLarge />\n            </s.Container>\n            <s.SpacerLarge />\n          <SignatureCanvas\n            backgroundColor={\"#4f8edb\"}\n            canvasProps={{ width: 350, height: 350 }}\n            ref={elementRef}\n          />\n          <s.SpacerLarge />\n          <s.Container flex={1} jc={\"center\"} ai={\"center\"} style={{ width: \"70%\" }} fd={\"row\"} style={{ flexWrap: \"wrap\" }}>\n        {data.loading ? (\n            <>\n              <s.SpacerSmall />\n              <s.TextDescription style={{ textAlign: \"center\" }}>\n                loading...\n              </s.TextDescription>\n            </>\n          ) : (\n            NFTS.map((nft, index) => {\n              return (\n                <s.Container key={index} style={{ padding: 16 }}>\n                  <s.TextTitle >{nft.metaData.name}</s.TextTitle>\n                  <s.SpacerSmall />\n                  <img\n                    alt={nft.metaData.name}\n                    src={nft.metaData.image}\n                    width={150}\n                  />\n                </s.Container>\n              );\n            })\n          )}\n        </s.Container>.\n      </s.Container>\n          \n                )}\n              </>\n            )}\n      </s.Container>          \n        <s.SpacerSmall />\n        <s.Container jc={\"center\"} ai={\"center\"} style={{ width: \"70%\" }}>\n          <s.TextDescription style={{ textAlign: \"center\", fontSize: 15}}>\n            This project is built for the consensys bootcamp final project, and \n          </s.TextDescription>\n          <s.SpacerSmall />\n          <s.TextDescription style={{ textAlign: \"center\", fontSize: 15 }}>\n            It is an experiment to make a donation through minting your drawing or signiture as an NFT and upload it to IPFS\n          </s.TextDescription>\n        </s.Container>\n      </s.Container>\n    </s.Screen>\n  );\n}\n\nexport default App;","/Users/intvirtue/Last-final/src/Navbar.js",["51","52"],"import React, { Component } from 'react';\n\nfunction Navbar(props) {\n\n  \n    return (\n      <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n        <a style={{ fontSize: 40, fontWeight: \"bold\"}}\n          className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n         \n          GoodNFT DAPP\n        </a>\n        <ul className=\"navbar-nav px-3\">\n          <li style={{ textAlign: \"right\", fontSize: 20}} className=\"nav-item text-nowrap d-none d-sm-none d-sm-block\">\n            <small className=\"text-secondary\">\n              <small id=\"account\">{props.account}</small>\n            </small>\n            {props.account\n              ? null\n              : <span></span>\n            }\n          </li>\n        </ul>\n      </nav>\n    );\n  \n}\n\nexport default Navbar;\n\n","/Users/intvirtue/Last-final/src/redux/data/dataActions.js",[],"/Users/intvirtue/Last-final/src/redux/blockchain/blockchainActions.js",[],"/Users/intvirtue/Last-final/src/redux/store.js",[],"/Users/intvirtue/Last-final/src/redux/blockchain/blockchainReducer.js",[],"/Users/intvirtue/Last-final/src/redux/data/dataReducer.js",[],"/Users/intvirtue/Last-final/src/styles/globalStyles.js",[],{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":133,"column":6,"nodeType":"59","endLine":133,"endColumn":42,"suggestions":"60"},{"ruleId":"57","severity":1,"message":"61","line":137,"column":6,"nodeType":"59","endLine":137,"endColumn":22,"suggestions":"62"},{"ruleId":"63","severity":1,"message":"64","line":178,"column":39,"nodeType":"65","messageId":"66","endLine":178,"endColumn":41},{"ruleId":"67","severity":1,"message":"68","line":253,"column":97,"nodeType":"69","messageId":"70","endLine":253,"endColumn":125},{"ruleId":"71","severity":1,"message":"72","line":1,"column":17,"nodeType":"73","messageId":"74","endLine":1,"endColumn":26},{"ruleId":"75","severity":1,"message":"76","line":8,"column":9,"nodeType":"77","endLine":12,"endColumn":10},"no-native-reassign",["78"],"no-negated-in-lhs",["79"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'blockchain.account'. Either include it or remove the dependency array.","ArrayExpression",["80"],"React Hook useEffect has a missing dependency: 'fetchMetatDataForNFTS'. Either include it or remove the dependency array.",["81"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"82","fix":"83"},{"desc":"84","fix":"85"},"Update the dependencies array to be: [blockchain.account, blockchain.smartContract, dispatch]",{"range":"86","text":"87"},"Update the dependencies array to be: [data.allTokens, fetchMetatDataForNFTS]",{"range":"88","text":"89"},[3827,3863],"[blockchain.account, blockchain.smartContract, dispatch]",[3921,3937],"[data.allTokens, fetchMetatDataForNFTS]"]