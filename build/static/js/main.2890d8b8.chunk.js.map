{"version":3,"sources":["redux/data/dataActions.js","styles/globalStyles.js","App.js","redux/blockchain/blockchainActions.js","Navbar.js","assests/bg/background.png","redux/blockchain/blockchainReducer.js","redux/data/dataReducer.js","redux/store.js","reportWebVitals.js","index.js"],"names":["fetchDataFailed","payload","type","fetchData","account","dispatch","a","store","getState","blockchain","smartContract","methods","name","call","getAllTokens","allTokens","totalSupply","console","log","Screen","styled","div","image","SpacerXSmall","input","attrs","props","size","SpacerSmall","SpacerMedium","SpacerLarge","Container","flex","fd","jc","ai","test","TextTitle","p","TextDescription","ipfsClient","create","StyledButton","button","img","App","useDispatch","useSelector","state","data","useState","loading","setLoading","feedback","setFeedback","NFTS","setNFTS","elementRef","useRef","ipfsBaseUrl","createMetaDataAndMint","_name","_des","_imgBuffer","add","addedImage","metaDataObj","description","path","JSON","stringify","addedMetaData","_uri","mint","send","from","value","once","err","then","receipt","clearCanvas","getImageData","dataUrl","current","toDataURL","Buffer","split","clear","useEffect","forEach","nft","fetch","uri","response","json","metaData","prevState","id","catch","background","style","backgroundColor","padding","textAlign","fontSize","fontWeight","Number","onClick","e","preventDefault","connect","errorMsg","disabled","canvasProps","width","height","ref","flexWrap","map","index","alt","src","connectFailed","window","ethereum","web3","Web3","enable","request","method","accounts","networkId","GoodNFT","networks","NetworkData","GoodNFTObj","eth","Contract","abi","address","on","updateAccount","location","reload","Navbar","className","target","rel","initialState","blockchainReducer","action","error","dataReducer","rootReducer","combineReducers","middleware","thunk","composeEnhancers","compose","applyMiddleware","createStore","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"0KAgBMA,EAAkB,SAACC,GACvB,MAAO,CACLC,KAAM,oBACND,QAASA,IAIAE,EAAY,SAACC,GACxB,8CAAO,WAAOC,GAAP,mBAAAC,EAAA,6DACLD,EArBK,CACLH,KAAM,uBAmBD,kBAGcK,IACdC,WACAC,WAAWC,cAAcC,QAAQC,OACjCC,OANA,cAGCD,EAHD,gBAOmBL,IACnBC,WACAC,WAAWC,cAAcC,QAAQG,eACjCD,OAVA,cAOCE,EAPD,iBAWuBR,IACvBC,WACAC,WAAWC,cAAcC,QAAQK,cACjCH,OAdA,QAWGG,EAXH,OAeHX,EA7BG,CACLH,KAAM,qBACND,QA4BqB,CACfW,OACAG,YACAC,iBAnBD,kDAuBHC,QAAQC,IAAR,MACAb,EAASL,EAAgB,uCAxBtB,0DAAP,wD,0VCrBWmB,EAASC,IAAOC,IAAV,2OAEG,gBAAGC,EAAH,EAAGA,MAAH,OAAgBA,EAAK,cAAUA,EAAV,KAAqB,UAmBnDC,GAVQH,IAAOI,MAAMC,OAAM,SAAAC,GAAK,MAAK,CAChDxB,KAAM,OACNyB,KAAMD,EAAMC,MAAQ,SAFDP,CAAH,iGAKN,SAAAM,GAAK,OAAIA,EAAMC,QACd,SAAAD,GAAK,OAAIA,EAAMC,QAIAP,IAAOC,IAAV,4DAMZO,EAAcR,IAAOC,IAAV,6DAMXQ,EAAeT,IAAOC,IAAV,6DAMZS,EAAcV,IAAOC,IAAV,6DAMXU,EAAYX,IAAOC,IAAV,iQAEZ,gBAAGW,EAAH,EAAGA,KAAH,OAAeA,GAAc,KACnB,gBAAGC,EAAH,EAAGA,GAAH,OAAaA,GAAU,YACtB,gBAAGC,EAAH,EAAGA,GAAH,OAAaA,GAAU,gBAC3B,gBAAGC,EAAH,EAAGA,GAAH,OAAaA,GAAU,gBAClB,qBAAGC,KAAmB,OAAS,UAE/B,gBAAGd,EAAH,EAAGA,MAAH,OAAgBA,EAAK,cAAUA,EAAV,KAAqB,UAKnDe,EAAYjB,IAAOkB,EAAV,6FAYTC,GANenB,IAAOkB,EAAV,6FAMMlB,IAAOkB,EAAV,8FAMGlB,IAAOC,IAAV,kE,s+qWClEtBmB,EAAaC,iBAAO,sCAEbC,EAAetB,IAAOuB,OAAV,6CAGQvB,IAAOC,IAAV,6NAWLD,IAAOwB,IAAV,iMA4QPC,IAjQf,WAAgB,IAAD,EACPxC,EAAWyC,cACXrC,EAAasC,aAAY,SAACC,GAAD,OAAWA,EAAMvC,cAC1CwC,EAAOF,aAAY,SAACC,GAAD,OAAWA,EAAMC,QAC1C,EAA8BC,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAgCF,mBAAS,4CAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAAwBJ,mBAAS,IAAjC,mBAAOK,EAAP,KAAaC,EAAb,KACMC,EAAaC,mBAGbC,EAAc,+BAIpB1C,QAAQC,IAAIqC,GAEZ,IAmBMK,EAAqB,uCAAG,WAAOC,EAAOC,EAAMC,GAApB,mBAAAzD,EAAA,6DAC5B8C,GAAW,GACXE,EAAY,oBAFgB,kBAIDd,EAAWwB,IAAID,GAJd,cAIpBE,EAJoB,OAKpBC,EAAc,CAClBtD,KAAMiD,EACNM,YAAaL,EACbxC,MAAOqC,EAAcM,EAAWG,MARR,SAUE5B,EAAWwB,IAAIK,KAAKC,UAAUJ,IAVhC,OAUpBK,EAVoB,OAW1BtD,QAAQC,IAAIyC,EAAcY,EAAcH,MA9B9BI,EA+BLb,EAAcY,EAAcH,KA9BnCd,EAAY,2BACZ7C,EAAWC,cAAcC,QACtB8D,KAAKhE,EAAWL,QAASoE,GACzBE,KAAK,CAAEC,KAAMlE,EAAWL,QAASwE,MAAO,OACxCC,KAAK,SAAS,SAACC,GACd7D,QAAQC,IAAI4D,GACZ1B,GAAW,GACXE,EAAY,0DAEbyB,MAAK,SAACC,GACL/D,QAAQC,IAAI8D,GACZ5B,GAAW,GACX6B,IACA5E,EAASF,YAAUM,EAAWL,UAC9BkD,EAAY,iEAIY,kDAc1BrC,QAAQC,IAAR,MACAkC,GAAW,GACXE,EAAY,SAhBc,kCAnBjB,IAACkB,IAmBgB,qBAAH,0DAwBrBU,EAAe,WACnB,IACIC,EADa1B,EAAW2B,QACLC,UAAU,aAEjC,OADeC,EAAOH,EAAQI,MAAM,KAAK,GAAI,WAqBzCN,EAAc,WACDxB,EAAW2B,QACnBI,SAaX,OAVAC,qBAAU,WACmB,KAAvBhF,EAAWL,SAA+C,OAA7BK,EAAWC,eAC1CL,EAASF,YAAUM,EAAWL,YAE/B,CAACK,EAAWC,cAAeL,IAE9BoF,qBAAU,WA3BRjC,EAAQ,IACRP,EAAKlC,UAAU2E,SAAQ,SAACC,GACtBC,MAAMD,EAAIE,KACPd,MAAK,SAACe,GAAD,OAAcA,EAASC,UAC5BhB,MAAK,SAACiB,GACLxC,GAAQ,SAACyC,GAAD,4BACHA,GADG,CAEN,CAAEC,GAAIP,EAAIO,GAAIF,SAAUA,WAG3BG,OAAM,SAACrB,GACN7D,QAAQC,IAAI4D,WAkBjB,CAAC7B,EAAKlC,YAGP,eAAC,IAAD,CAAUO,MAAO8E,IAAYC,MAAO,CAAEC,gBAAiB,iBAAvD,UACE,eAAC,IAAD,CAAatE,KAAM,EAAGG,GAAI,SAAUkE,MAAO,CAAEE,QAAS,IAAtD,UACC,cAAC,IAAD,IACA,cAAC,IAAD,IACA,eAAC,IAAD,sBAGY9F,EAAWL,cAIxB,eAAC,IAAD,CAAa4B,KAAM,EAAGG,GAAI,SAAUkE,MAAO,CAAEE,QAAS,IAAtD,UACE,cAAC,IAAD,CACEF,MAAO,CAAEG,UAAW,SAAUC,SAAU,GAAIC,WAAY,QAD1D,qDAKA,cAAC,IAAD,IACA,cAAC,IAAD,CACEL,MAAO,CAAEG,UAAW,SAAUC,SAAU,GAAIC,WAAY,QAD1D,mDAKA,cAAC,IAAD,IAEI,eAAC,IAAD,CACEL,MAAO,CAAEG,UAAW,SAAUC,SAAU,GAAIC,WAAY,QAD1D,0BAGgBzD,EAAKjC,YAHrB,gBAMF,cAAC,IAAD,IACA,cAAC,IAAD,CACEgB,KAAM,EACNE,GAAI,SACJC,GAAI,SACJkE,MAAO,CAAEC,gBAAiB,UAAWC,QAAS,IAJhD,SAM+B,IAA5BI,OAAO1D,EAAKjC,aACX,mCACE,cAAC,IAAD,CAAaqF,MAAO,CAAEG,UAAW,UAAjC,uCAKF,qCACE,cAAC,IAAD,CAAaH,MAAO,CAAEG,UAAW,UAAjC,6CAGA,cAAC,IAAD,IAEA,cAAC,IAAD,IACA,cAAC,IAAD,CAAmBH,MAAO,CAAEG,UAAW,SAAUC,SAAU,IAA3D,SACGpD,IAEH,cAAC,IAAD,IACA,cAAC,IAAD,IACwB,KAAvB5C,EAAWL,SACiB,OAA7BK,EAAWC,cACT,eAAC,IAAD,CAAayB,GAAI,SAAUD,GAAI,SAA/B,UACE,cAAC,IAAD,CAAmBmE,MAAO,CAAEG,UAAW,UAAvC,iCAGA,cAAC,IAAD,IACA,cAAC9D,EAAD,CACEkE,QAAS,SAACC,GACRA,EAAEC,iBACFzG,EAAS0G,gBAHb,qBAQyB,KAAxBtG,EAAWuG,SACV,qCACE,cAAC,IAAD,IACA,cAAC,IAAD,CAAmBX,MAAO,CAAEG,UAAW,UAAvC,SACG/F,EAAWuG,cAGd,QAGN,eAAC,IAAD,CAAahF,KAAM,EAAGG,GAAI,SAAUkE,MAAO,CAAEE,QAAS,IAAtD,UAEE,eAAC,IAAD,CAAapE,GAAI,SAAUD,GAAI,SAAUD,GAAI,MAA7C,UACA,cAACS,EAAD,CACEuE,SAAU9D,EAAU,EAAI,EACxByD,QAAS,SAACC,GACRA,EAAEC,iBAnItBlD,EA7CW,WACO,oCA4CuBsB,MAgIzB,kBASR,cAAC,IAAD,IACA,cAACxC,EAAD,CACEuE,SAAU9D,EAAU,EAAI,EACxByD,QAAS,SAACC,GACRA,EAAEC,iBACF7B,KAJJ,mBASA,cAAC,IAAD,OAEA,cAAC,IAAD,IACF,cAAC,IAAD,CACEqB,gBAAiB,UACjBY,YAAa,CAAEC,MAAO,IAAKC,OAAQ,KACnCC,IAAK5D,IAEP,cAAC,IAAD,IACA,cAAC,KAAD,GAAazB,KAAM,EAAGE,GAAI,SAAUC,GAAI,SAAUkE,MAAO,CAAEc,MAAO,OAASlF,GAAI,OAA/E,sBAA6F,CAAEqF,SAAU,SAAzG,yBACDrE,EAAKE,QACF,qCACE,cAAC,IAAD,IACA,cAAC,IAAD,CAAmBkD,MAAO,CAAEG,UAAW,UAAvC,2BAKFjD,EAAKgE,KAAI,SAAC5B,EAAK6B,GACb,OACE,eAAC,IAAD,CAAyBnB,MAAO,CAAEE,QAAS,IAA3C,UACE,cAAC,IAAD,UAAeZ,EAAIK,SAASpF,OAC5B,cAAC,IAAD,IACA,qBACE6G,IAAK9B,EAAIK,SAASpF,KAClB8G,IAAK/B,EAAIK,SAAS1E,MAClB6F,MAAO,QANOK,OAXxB,IA/BQ,YA6DV,cAAC,IAAD,IACA,eAAC,IAAD,CAAatF,GAAI,SAAUC,GAAI,SAAUkE,MAAO,CAAEc,MAAO,OAAzD,UACE,cAAC,IAAD,CAAmBd,MAAO,CAAEG,UAAW,SAAUC,SAAU,IAA3D,iFAGA,cAAC,IAAD,IACA,cAAC,IAAD,CAAmBJ,MAAO,CAAEG,UAAW,SAAUC,SAAU,IAA3D,0I,2JC7QJkB,EAAgB,SAAC1H,GACrB,MAAO,CACLC,KAAM,oBACND,QAASA,IAWA8G,EAAU,WACrB,8CAAO,WAAO1G,GAAP,uBAAAC,EAAA,yDACLD,EA5BK,CACLH,KAAM,wBA4BF0H,OAAOC,SAFN,wBAGCC,EAAO,IAAIC,IAAKH,OAAOC,UAHxB,SAIGD,OAAOC,SAASG,SAJnB,gCAMsBJ,OAAOC,SAASI,QAAQ,CAC7CC,OAAQ,iBAPT,cAMKC,EANL,iBAUuBP,OAAOC,SAASI,QAAQ,CAC9CC,OAAQ,gBAXT,eAUKE,EAVL,iBAayBC,EAAQC,SAASF,GAb1C,SAaKG,EAbL,SAeOC,EAAa,IAAIV,EAAKW,IAAIC,SAC9BL,EAAQM,IACRJ,EAAYK,SAEdvI,EAxCD,CACLH,KAAM,qBACND,QAuCuB,CACbG,QAAS+H,EAAS,GAClBzH,cAAe8H,EACfV,KAAMA,KAIVF,OAAOC,SAASgB,GAAG,mBAAmB,SAACV,GACrC9H,EAASyI,EAAcX,EAAS,QAGlCP,OAAOC,SAASgB,GAAG,gBAAgB,WACjCjB,OAAOmB,SAASC,aAIlB3I,EAASsH,EAAc,uCApCxB,kDAuCDtH,EAASsH,EAAc,0BAvCtB,gCA0CHtH,EAASsH,EAAc,sBA1CpB,0DAAP,uDA+CWmB,EAAgB,SAAC1I,GAC5B,8CAAO,WAAOC,GAAP,SAAAC,EAAA,sDACLD,EAxDK,CACLH,KAAM,iBACND,QAsD8B,CAAEG,QAASA,KACzCC,EAASF,YAAUC,IAFd,2CAAP,wD,iCClFF,gBA+Be6I,IA7Bf,SAAgBvH,GAGZ,OACE,sBAAKwH,UAAU,iEAAf,UACE,mBAAG7C,MAAO,CAAEI,SAAU,GAAIC,WAAY,QACpCwC,UAAU,sCACVC,OAAO,SACPC,IAAI,sBAHN,0BAQA,oBAAIF,UAAU,kBAAd,SACE,qBAAI7C,MAAO,CAAEG,UAAW,QAASC,SAAU,IAAKyC,UAAU,mDAA1D,UACE,uBAAOA,UAAU,iBAAjB,SACE,uBAAOhD,GAAG,UAAV,SAAqBxE,EAAMtB,YAE5BsB,EAAMtB,QACH,KACA,mC,iCCtBD,QAA0B,wC,sfCAnCiJ,EAAe,CACnBlG,SAAS,EACT/C,QAAS,KACTM,cAAe,KACfoH,KAAM,KACNd,SAAU,IAkCGsC,EA/BW,WAAmC,IAAlCtG,EAAiC,uDAAzBqG,EAAcE,EAAW,uCAC1D,OAAQA,EAAOrJ,MACb,IAAK,qBACH,OAAO,2BACFmJ,GADL,IAEElG,SAAS,IAEb,IAAK,qBACH,OAAO,2BACFH,GADL,IAEEG,SAAS,EACT/C,QAASmJ,EAAOtJ,QAAQG,QACxBM,cAAe6I,EAAOtJ,QAAQS,cAC9BoH,KAAMyB,EAAOtJ,QAAQ6H,OAEzB,IAAK,oBACH,OAAO,2BACFuB,GADL,IAEElG,SAAS,EACT6D,SAAUuC,EAAOtJ,UAErB,IAAK,iBACH,OAAO,2BACF+C,GADL,IAEE5C,QAASmJ,EAAOtJ,QAAQG,UAE5B,QACE,OAAO4C,ICnCPqG,EAAe,CACnBlG,SAAS,EACTvC,KAAM,GACNG,UAAW,GACXC,YAAa,EACbwI,OAAO,EACPxC,SAAU,IA8BGyC,EA3BK,WAAmC,IAAlCzG,EAAiC,uDAAzBqG,EAAcE,EAAW,uCACpD,OAAQA,EAAOrJ,MACb,IAAK,qBACH,OAAO,2BACFmJ,GADL,IAEElG,SAAS,IAEb,IAAK,qBACH,OAAO,2BACFkG,GADL,IAEElG,SAAS,EACTvC,KAAM2I,EAAOtJ,QAAQW,KACrBG,UAAWwI,EAAOtJ,QAAQc,UAC1BC,YAAauI,EAAOtJ,QAAQe,cAEhC,IAAK,oBACH,OAAO,2BACFqI,GADL,IAEElG,SAAS,EACTqG,OAAO,EACPxC,SAAUuC,EAAOtJ,UAErB,QACE,OAAO+C,IC3BP0G,EAAcC,YAAgB,CAClClJ,WAAY6I,EACZrG,KAAMwG,IAGFG,EAAa,CAACC,KACdC,EAAmBC,YAAQC,IAAe,WAAf,EAAmBJ,IAM9CrJ,EAHG0J,YAAYP,EAAaI,GAKnBvJ,O,4ICPA2J,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBrF,MAAK,YAAkD,IAA/CsF,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,uCCEdO,IAASC,OACP,cAAC,IAAD,CAAUpK,MAAOA,IAAjB,SACE,cAACsC,EAAA,EAAD,MAEF+H,SAASC,eAAe,SAM1BX,M","file":"static/js/main.2890d8b8.chunk.js","sourcesContent":["// log\nimport store from \"../store\";\n\nconst fetchDataRequest = () => {\n  return {\n    type: \"CHECK_DATA_REQUEST\",\n  };\n};\n\nconst fetchDataSuccess = (payload) => {\n  return {\n    type: \"CHECK_DATA_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst fetchDataFailed = (payload) => {\n  return {\n    type: \"CHECK_DATA_FAILED\",\n    payload: payload,\n  };\n};\n\nexport const fetchData = (account) => {\n  return async (dispatch) => {\n    dispatch(fetchDataRequest());\n    try {\n      let name = await store\n        .getState()\n        .blockchain.smartContract.methods.name()\n        .call();\n      let allTokens = await store\n        .getState()\n        .blockchain.smartContract.methods.getAllTokens()\n        .call();\n        let totalSupply = await store\n        .getState()\n        .blockchain.smartContract.methods.totalSupply()\n        .call();\n      dispatch(\n        fetchDataSuccess({\n          name,\n          allTokens,\n          totalSupply,\n        })\n      );\n    } catch (err) {\n      console.log(err);\n      dispatch(fetchDataFailed(\"Could not load data from contract.\"));\n    }\n  };\n};\n","import styled from \"styled-components\";\n\n// Used for wrapping a page component\nexport const Screen = styled.div`\n  background-color: var(--dark-grey);\n  background-image: ${({ image }) => (image ? `url(${image})` : \"none\")};\n  background-size: cover;\n  background-position: center;\n  width: 100%;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const Input = styled.input.attrs(props => ({\n  type: \"text\",\n  size: props.size || \"1em\",\n}))`\n  border: 2px solid palevioletred;\n  margin: ${props => props.size};\n  padding: ${props => props.size};\n`;\n\n// Used for providing space between components\nexport const SpacerXSmall = styled.div`\n  height: 8px;\n  width: 8px;\n`;\n\n// Used for providing space between components\nexport const SpacerSmall = styled.div`\n  height: 16px;\n  width: 16px;\n`;\n\n// Used for providing space between components\nexport const SpacerMedium = styled.div`\n  height: 24px;\n  width: 24px;\n`;\n\n// Used for providing space between components\nexport const SpacerLarge = styled.div`\n  height: 32px;\n  width: 32px;\n`;\n\n// Used for providing a wrapper around a component\nexport const Container = styled.div`\n  display: flex;\n  flex: ${({ flex }) => (flex ? flex : 0)};\n  flex-direction: ${({ fd }) => (fd ? fd : \"column\")};\n  justify-content: ${({ jc }) => (jc ? jc : \"flex-start\")};\n  align-items: ${({ ai }) => (ai ? ai : \"flex-start\")};\n  background-color: ${({ test }) => (test ? \"pink\" : \"none\")};\n  width: 100%;\n  background-image: ${({ image }) => (image ? `url(${image})` : \"none\")};\n  background-size: cover;\n  background-position: center;\n`;\n\nexport const TextTitle = styled.p`\n  color: var(--white);\n  font-size: 20px;\n  font-weight: 500;\n`;\n\nexport const TextSubTitle = styled.p`\n  color: var(--white);\n  font-size: 16px;\n  font-weight: 500;\n`;\n\nexport const TextDescription = styled.p`\n  color: var(--white);\n  font-size: 14px;\n  font-weight: 600;\n`;\n\nexport const StyledClickable = styled.div`\n  :active {\n    opacity: 0.6;\n  }\n`;\n","import React, { useEffect, useState, useRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { connect } from \"./redux/blockchain/blockchainActions\";\nimport { fetchData } from \"./redux/data/dataActions\";\nimport * as s from \"./styles/globalStyles\";\nimport styled from \"styled-components\";\nimport { create } from \"ipfs-http-client\";\nimport SignatureCanvas from \"react-signature-canvas\";\nimport Navbar from './Navbar'\nimport background from \"./assests/bg/background.png\";\n\n\n\nconst ipfsClient = create(\"https://ipfs.infura.io:5001/api/v0\");\n\nexport const StyledButton = styled.button`\n  padding: 8px;\n`;\nexport const ResponsiveWrapper = styled.div`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: stretched;\n  align-items: stretched;\n  width: 100%;\n  @media (min-width: 767px) {\n    flex-direction: row;\n  }\n`;\nexport const StyledImg = styled.img`\n  width: 200px;\n  height: 200px;\n  @media (min-width: 767px) {\n    width: 350px;\n    height: 350px;\n  }\n  transition: width 0.5s;\n  transition: height 0.5s;\n`;\n\nfunction App() {\n  const dispatch = useDispatch();\n  const blockchain = useSelector((state) => state.blockchain);\n  const data = useSelector((state) => state.data);\n  const [loading, setLoading] = useState(false);\n  const [feedback, setFeedback] = useState(\"Sign or draw something and click on MINT\");\n  const [NFTS, setNFTS] = useState([]);\n  const elementRef = useRef();\n  \n  \n  const ipfsBaseUrl = \"https://ipfs.infura.io/ipfs/\";\n  const name = \"Good NFT\";\n  const description = \"A donation made by minting an NFT\";\n  \n  console.log(NFTS);\n\n  const mint = (_uri) => {\n    setFeedback(\"Minting your GoodNFT...\");\n    blockchain.smartContract.methods\n      .mint(blockchain.account, _uri)\n      .send({ from: blockchain.account, value: 10000000000000000})\n      .once(\"error\", (err) => {\n        console.log(err);\n        setLoading(false);\n        setFeedback(\"Sorry, something went wrong please try again later.\");\n      })\n      .then((receipt) => {\n        console.log(receipt);\n        setLoading(false);\n        clearCanvas();\n        dispatch(fetchData(blockchain.account));\n        setFeedback(\"Successfully minting your NFT, Thank you for your donation\");\n      });\n  };\n\n  const createMetaDataAndMint = async (_name, _des, _imgBuffer) => {\n    setLoading(true);\n    setFeedback(\"Minting Your NFT\");\n    try {\n      const addedImage = await ipfsClient.add(_imgBuffer);\n      const metaDataObj = {\n        name: _name,\n        description: _des,\n        image: ipfsBaseUrl + addedImage.path,\n      };\n      const addedMetaData = await ipfsClient.add(JSON.stringify(metaDataObj));\n      console.log(ipfsBaseUrl + addedMetaData.path);\n      mint(ipfsBaseUrl + addedMetaData.path);\n    } catch (err) {\n      console.log(err);\n      setLoading(false);\n      setFeedback(\"Error\");\n    }\n  };\n\n  const startMintingProcess = () => {\n    createMetaDataAndMint(name, description, getImageData());\n  };\n\n  const getImageData = () => {\n    const canvasEl = elementRef.current;\n    let dataUrl = canvasEl.toDataURL(\"image/png\");\n    const buffer = Buffer(dataUrl.split(\",\")[1], \"base64\");\n    return buffer;\n  };\n\n  const fetchMetatDataForNFTS = () => {\n    setNFTS([]);\n    data.allTokens.forEach((nft) => {\n      fetch(nft.uri)\n        .then((response) => response.json())\n        .then((metaData) => {\n          setNFTS((prevState) => [\n            ...prevState,\n            { id: nft.id, metaData: metaData },\n          ]);\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    });\n  };\n\n  const clearCanvas = () => {\n    const canvasEl = elementRef.current;\n    canvasEl.clear();\n  };\n\n  useEffect(() => {\n    if (blockchain.account !== \"\" && blockchain.smartContract !== null) {\n      dispatch(fetchData(blockchain.account));\n    }\n  }, [blockchain.smartContract, dispatch]);\n\n  useEffect(() => {\n    fetchMetatDataForNFTS();\n  }, [data.allTokens]);\n\n  return (\n    <s.Screen image={background} style={{ backgroundColor: \"var(--yellow)\" }}>\n      <s.Container flex={1} ai={\"center\"} style={{ padding: 24 }} >\n       <Navbar />\n       <s.SpacerMedium />\n       <s.TextTitle\n          \n        >\n          Account:{blockchain.account}\n          \n        </s.TextTitle>\n      </s.Container>\n      <s.Container flex={1} ai={\"center\"} style={{ padding: 24 }}>\n        <s.TextTitle\n          style={{ textAlign: \"center\", fontSize: 28, fontWeight: \"bold\" }}\n        >\n          Mint your GoodNFT...and make a donation\n        </s.TextTitle>\n        <s.SpacerMedium />\n        <s.TextTitle\n          style={{ textAlign: \"center\", fontSize: 28, fontWeight: \"bold\" }}\n        >\n          We appreciate that you thought of us!\n        </s.TextTitle>\n        <s.SpacerMedium />\n           \n            <s.TextTitle \n              style={{ textAlign: \"center\", fontSize: 35, fontWeight: \"bold\" }}\n            >\n              NFTs Minted: {data.totalSupply} out of 50\n            </s.TextTitle>\n          \n          <s.SpacerMedium />\n          <s.Container\n            flex={1}\n            jc={\"center\"}\n            ai={\"center\"}\n            style={{ backgroundColor: \"#383838\", padding: 24 }}\n          >\n            {Number(data.totalSupply) == 50 ? (\n              <>\n                <s.TextTitle style={{ textAlign: \"center\" }}>\n                  The donation has ended.\n                </s.TextTitle>\n              </>\n            ) : (\n              <>\n                <s.TextTitle style={{ textAlign: \"center\" }}>\n                  Donation costs 0.01 ETH per NFT\n                </s.TextTitle>\n                <s.SpacerXSmall />\n                \n                <s.SpacerXSmall />\n                <s.TextDescription style={{ textAlign: \"center\", fontSize: 22}}>\n                  {feedback}\n                </s.TextDescription>\n                <s.SpacerSmall />\n                <s.SpacerMedium />\n                {blockchain.account === \"\" ||\n                blockchain.smartContract === null ? (\n                  <s.Container ai={\"center\"} jc={\"center\"}>\n                    <s.TextDescription style={{ textAlign: \"center\" }}>\n                      Connect Your Wallet \n                    </s.TextDescription>\n                    <s.SpacerSmall />\n                    <StyledButton\n                      onClick={(e) => {\n                        e.preventDefault();\n                        dispatch(connect());\n                      }}\n                    >\n                      CONNECT\n                    </StyledButton>\n                    {blockchain.errorMsg !== \"\" ? (\n                      <>\n                        <s.SpacerSmall />\n                        <s.TextDescription style={{ textAlign: \"center\" }}>\n                          {blockchain.errorMsg}\n                        </s.TextDescription>\n                      </>\n                    ) : null}\n                  </s.Container>\n                ) : (\n                  <s.Container flex={1} ai={\"center\"} style={{ padding: 24 }}>\n                    \n                    <s.Container ai={\"center\"} jc={\"center\"} fd={\"row\"}>\n                    <StyledButton\n                      disabled={loading ? 1 : 0}\n                      onClick={(e) => {\n                        e.preventDefault();\n                        startMintingProcess();\n                      }}\n                    >\n            MINT\n            </StyledButton>\n            <s.SpacerSmall />\n            <StyledButton\n              disabled={loading ? 1 : 0}\n              onClick={(e) => {\n                e.preventDefault();\n                clearCanvas();\n              }}\n            >\n              CLEAR\n            </StyledButton>\n            <s.SpacerLarge />\n            </s.Container>\n            <s.SpacerLarge />\n          <SignatureCanvas\n            backgroundColor={\"#4f8edb\"}\n            canvasProps={{ width: 350, height: 350 }}\n            ref={elementRef}\n          />\n          <s.SpacerLarge />\n          <s.Container flex={1} jc={\"center\"} ai={\"center\"} style={{ width: \"70%\" }} fd={\"row\"} style={{ flexWrap: \"wrap\" }}>\n        {data.loading ? (\n            <>\n              <s.SpacerSmall />\n              <s.TextDescription style={{ textAlign: \"center\" }}>\n                loading...\n              </s.TextDescription>\n            </>\n          ) : (\n            NFTS.map((nft, index) => {\n              return (\n                <s.Container key={index} style={{ padding: 16 }}>\n                  <s.TextTitle >{nft.metaData.name}</s.TextTitle>\n                  <s.SpacerSmall />\n                  <img\n                    alt={nft.metaData.name}\n                    src={nft.metaData.image}\n                    width={150}\n                  />\n                </s.Container>\n              );\n            })\n          )}\n        </s.Container>.\n      </s.Container>\n          \n                )}\n              </>\n            )}\n      </s.Container>          \n        <s.SpacerSmall />\n        <s.Container jc={\"center\"} ai={\"center\"} style={{ width: \"70%\" }}>\n          <s.TextDescription style={{ textAlign: \"center\", fontSize: 15}}>\n            This project is built for the consensys bootcamp final project, and \n          </s.TextDescription>\n          <s.SpacerSmall />\n          <s.TextDescription style={{ textAlign: \"center\", fontSize: 15 }}>\n            It is an experiment to make a donation through minting your drawing or signiture as an NFT and upload it to IPFS\n          </s.TextDescription>\n        </s.Container>\n      </s.Container>\n    </s.Screen>\n  );\n}\n\nexport default App;","// constants\nimport Web3 from \"web3\";\nimport GoodNFT from \"/Users/intvirtue/Last-final/src/contracts/GoodNFT.json\";\n// log\nimport { fetchData } from \"../data/dataActions\";\n\nconst connectRequest = () => {\n  return {\n    type: \"CONNECTION_REQUEST\",\n  };\n};\n\nconst connectSuccess = (payload) => {\n  return {\n    type: \"CONNECTION_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst connectFailed = (payload) => {\n  return {\n    type: \"CONNECTION_FAILED\",\n    payload: payload,\n  };\n};\n\nconst updateAccountRequest = (payload) => {\n  return {\n    type: \"UPDATE_ACCOUNT\",\n    payload: payload,\n  };\n};\n\nexport const connect = () => {\n  return async (dispatch) => {\n    dispatch(connectRequest());\n    if (window.ethereum) {\n      let web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n      try {\n        const accounts = await window.ethereum.request({\n          method: \"eth_accounts\",\n          \n        });\n        const networkId = await window.ethereum.request({\n          method: \"net_version\",\n        });\n        const NetworkData = await GoodNFT.networks[networkId];\n        if (NetworkData) {\n          const GoodNFTObj = new web3.eth.Contract(\n            GoodNFT.abi,\n            NetworkData.address\n          );\n          dispatch(\n            connectSuccess({\n              account: accounts[0],\n              smartContract: GoodNFTObj,\n              web3: web3,\n            })\n          );\n          // Add listeners start\n          window.ethereum.on(\"accountsChanged\", (accounts) => {\n            dispatch(updateAccount(accounts[0]));\n\n          });\n          window.ethereum.on(\"chainChanged\", () => {\n            window.location.reload();\n          });\n          // Add listeners end\n        } else {\n          dispatch(connectFailed(\"Change network to Ropsten Testnet.\"));\n        }\n      } catch (err) {\n        dispatch(connectFailed(\"Something went wrong.\"));\n      }\n    } else {\n      dispatch(connectFailed(\"Install Metamask.\"));\n    }\n  };\n};\n\nexport const updateAccount = (account) => {\n  return async (dispatch) => {\n    dispatch(updateAccountRequest({ account: account }));\n    dispatch(fetchData(account));\n  };\n};\n","import React, { Component } from 'react';\n\nfunction Navbar(props) {\n\n  \n    return (\n      <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n        <a style={{ fontSize: 40, fontWeight: \"bold\"}}\n          className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n         \n          GoodNFT DAPP\n        </a>\n        <ul className=\"navbar-nav px-3\">\n          <li style={{ textAlign: \"right\", fontSize: 20}} className=\"nav-item text-nowrap d-none d-sm-none d-sm-block\">\n            <small className=\"text-secondary\">\n              <small id=\"account\">{props.account}</small>\n            </small>\n            {props.account\n              ? null\n              : <span></span>\n            }\n          </li>\n        </ul>\n      </nav>\n    );\n  \n}\n\nexport default Navbar;\n\n","export default __webpack_public_path__ + \"static/media/background.670c1166.png\";","const initialState = {\n  loading: false,\n  account: null,\n  smartContract: null,\n  web3: null,\n  errorMsg: \"\",\n};\n\nconst blockchainReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"CONNECTION_REQUEST\":\n      return {\n        ...initialState,\n        loading: true,\n      };\n    case \"CONNECTION_SUCCESS\":\n      return {\n        ...state,\n        loading: false,\n        account: action.payload.account,\n        smartContract: action.payload.smartContract,\n        web3: action.payload.web3,\n      };\n    case \"CONNECTION_FAILED\":\n      return {\n        ...initialState,\n        loading: false,\n        errorMsg: action.payload,\n      };\n    case \"UPDATE_ACCOUNT\":\n      return {\n        ...state,\n        account: action.payload.account,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default blockchainReducer;\n","const initialState = {\n  loading: false,\n  name: \"\",\n  allTokens: [],\n  totalSupply: 0,\n  error: false,\n  errorMsg: \"\",\n};\n\nconst dataReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"CHECK_DATA_REQUEST\":\n      return {\n        ...initialState,\n        loading: true,\n      };\n    case \"CHECK_DATA_SUCCESS\":\n      return {\n        ...initialState,\n        loading: false,\n        name: action.payload.name,\n        allTokens: action.payload.allTokens,\n        totalSupply: action.payload.totalSupply,\n      };\n    case \"CHECK_DATA_FAILED\":\n      return {\n        ...initialState,\n        loading: false,\n        error: true,\n        errorMsg: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default dataReducer;\n","import { applyMiddleware, compose, createStore, combineReducers } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport blockchainReducer from \"./blockchain/blockchainReducer\";\nimport dataReducer from \"./data/dataReducer\";\n\nconst rootReducer = combineReducers({\n  blockchain: blockchainReducer,\n  data: dataReducer,\n});\n\nconst middleware = [thunk];\nconst composeEnhancers = compose(applyMiddleware(...middleware));\n\nconst configureStore = () => {\n  return createStore(rootReducer, composeEnhancers);\n};\n\nconst store = configureStore();\n\nexport default store;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport store from \"./redux/store\";\nimport { Provider } from \"react-redux\";\nimport \"./styles/reset.css\";\nimport \"./styles/theme.css\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}